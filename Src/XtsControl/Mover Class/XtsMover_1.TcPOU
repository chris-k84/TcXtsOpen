<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="XtsMover_1" Id="{ef99dcfa-3a80-4bb1-9be5-b7e3eec36b1f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsMover_1 IMPLEMENTS IMover
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_axis 			: AXIS_REF;
	axesEnable		: MC_Power;
	axesReset		: AxesReset(_axis);
	axesMoveTo 		: MoveMoverToPositionZoned(_axis) := (Gap := 213.0);
	axesHalt 		: HaltMover(_axis);
	_identInGroup : INT;
	_trackLength : REAL := 11000.0;
	_targetPos : LREAL;
	_MoverState : XtsMoverStates := XtsMoverStates.Idle;
	_MoverErrorId : DWORD;
	axesReadError : Tc2_MC2.MC_ReadAxisError;
	ErrorTrigger : Tc2_Standard.R_TRIG;
	ClearCommand : BOOL;
	arrZones : ARRAY[1..4] OF DINT;
	arrVelocities : ARRAY[1..4] OF mc_LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[axesMoveTo(arrPositions := arrZones, arrVelos := arrVelocities);
axesHalt();
axesReset();
_axis.ReadStatus();
axesEnable(Axis := _axis);
axesReadError(Axis := _axis, Enable := TRUE, AxisErrorID => _MoverErrorId);
]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{eaed7ed7-4972-4bde-a8ae-374068f2e1d7}" />
    <Folder Name="Properties" Id="{c2a18025-c958-4ac3-8875-b51fe534ec19}" />
    <Property Name="Acceleration" Id="{2ff3ef35-a569-4805-982e-19060cdcadf8}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Acceleration : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{e2de392f-56b7-402f-8074-b2698d94cd96}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Acceleration := axesMoveTo.Acceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7d1f9ee3-7db8-42d1-bdd2-f6f4fe85182c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[axesMoveTo.Acceleration := Acceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="AxisModuloPosition" Id="{1bc33d5c-2f1c-48e7-9815-fd4d2687d12b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AxisModuloPosition : lreal]]></Declaration>
      <Get Name="Get" Id="{1417a671-9b43-4458-99a3-abb23ed99dbf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisModuloPosition := _axis.NcToPlc.ModuloActPos;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{eea2098d-34bc-49c9-a611-dd16324f3103}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//_axis.NcToPlc.ModuloActPos := AxisModuloPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="AxisRef" Id="{01e55b42-36fe-4a19-b8bc-5732fb36220a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC AxisRef : reference to AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{cb47c8d8-4b8d-45b7-b2f3-88b37899d67d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisRef REF= THIS^._axis;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AxisState" Id="{367e67d0-cb96-48b5-a29c-178813ff59f9}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AxisState : XtsMoverStates]]></Declaration>
      <Get Name="Get" Id="{25cf42ff-3ae6-4874-a5c9-5e9cee48414a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisState := _MoverState;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{07130695-cb53-4d82-ab2a-f31d1e05cb81}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MoverState := AxisState;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Deceleration" Id="{92cf8b6e-4a5e-4417-aac2-24c01f1c5dca}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Deceleration : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{e82bc52f-c8ae-4e9e-a9e3-6da938b93d9d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Deceleration := axesMoveTo.Deceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{81692bca-232e-4fd7-8292-9d00468160ad}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[axesMoveTo.Deceleration := Deceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="DisableAxis" Id="{1b3263bc-e380-44e9-be37-5376884ff9b4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC DisableAxis : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[axesEnable.Enable := false;
IF _MoverState = XtsMoverStates.ForwardMove OR 
	_MoverState = XtsMoverStates.ForwardStationary THEN
	_MoverState := XtsMoverStates.ForwardFailed;
	axesMoveTo.Abort();
ELSIF _MoverState = XtsMoverStates.ReverseMove OR
		_MoverState = XtsMoverStates.ReverseStationary THEN
	_MoverState := XtsMoverStates.ReverseFailed;
	axesMoveTo.Abort();
ELSIF _MoverState = XtsMoverStates.ForwardFailed OR
		_MoverState = XtsMoverStates.ReverseFailed THEN
	;	
ELSE
	_MoverState := XtsMoverStates.Idle;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableAxis" Id="{360b3871-4ecd-4e04-a0cf-d2f88c404f34}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC EnableAxis : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[axesEnable.Enable := axesEnable.Enable_Negative := axesEnable.Enable_Positive := TRUE;
axesEnable.Override := 100;
_MoverState := XtsMoverStates.Available;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Gap" Id="{5f1c496a-f9c2-42d2-8e8c-7add0678cd71}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Gap : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{18fb858a-dadb-4941-9a8c-f48a98d4823d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Gap := axesMoveTo.Gap;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7d7786c3-d1d3-4237-90e0-b0dcadb9f776}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[axesMoveTo.Gap := Gap;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="HaltAxis" Id="{6bae8d1f-a2da-4c77-85e7-d8a3a22097f2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC HaltAxis : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT axesHalt.Busy THEN
	axesHalt.Execute();
	HaltAxis := TRUE;
END_IF

IF _MoverState = XtsMoverStates.ForwardMove OR
		_MoverState = XtsMoverStates.ForwardStationary THEN
	_MoverState := XtsMoverStates.ForwardAborted;
	axesMoveTo.Abort();	
END_IF
IF _MoverState = XtsMoverStates.ReverseMove OR
		_MoverState = XtsMoverStates.ReverseStationary THEN
	_MoverState := XtsMoverStates.ReverseAborted;
	axesMoveTo.Abort();	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="hasError" Id="{2144fcf9-1e8b-4167-97f1-6ba2b90ebc6a}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD hasError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hasError := _axis.Status.Error;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IdentInGroup" Id="{19e36ff7-6f0b-4c81-8de1-07ba08c2b881}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC IdentInGroup : int]]></Declaration>
      <Get Name="Get" Id="{1365385d-4a63-487a-80f6-0009a69f54e3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IdentInGroup := _identInGroup;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f864d89d-3063-451e-a93c-bd283e07734d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_identInGroup := IdentInGroup;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="isAtPosition" Id="{39308b66-5dc4-4a47-8870-b2f55857baeb}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD isAtPosition : BOOL
VAR_INPUT
	position : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF position > 1 THEN
	IF _axis.NcToPlc.ModuloActPos < position + 1 AND _axis.NcToPlc.ModuloActPos > position - 1 THEN
		isAtPosition := TRUE;
	END_IF  
ELSE
	IF _axis.NcToPlc.ModuloActPos < position + 1 AND _axis.NcToPlc.ModuloActPos > 0.0  
		OR _axis.NcToPlc.ModuloActPos < _trackLength AND _axis.NcToPlc.ModuloActPos > _trackLength - 1 THEN
		isAtPosition := TRUE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="isDetected" Id="{89fc594e-e0bb-4575-99c4-94c722480634}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC isDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _axis.NcToPlc.AxisId = 0 THEN
	RETURN;
END_IF
isDetected := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isEnabled" Id="{53e9ceee-0f9a-44de-97cb-d34eed6a219b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD isEnabled : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isEnabled := not _axis.Status.Disabled;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Jerk" Id="{548fb4a5-3802-4c99-82aa-6d502a8dad87}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Jerk : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{b58abe1d-7c4a-4813-84be-1859f1b4a47a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Jerk := axesMoveTo.Jerk;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a819e645-7df3-49f6-a330-3021c8d5dd5a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[axesMoveTo.Jerk := Jerk;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ModuloToAbs" Id="{067d24fe-f446-49ab-9c6d-11b94ed29e49}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PRIVATE ModuloToAbs : mc_lreal
VAR_INPUT
	moduloPositionDemand: MC_LREAL;
	_backwardsAllowed : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//---------code to set actual position from modulo command----------------------
IF NOT _backwardsAllowed THEN
	//--------if you want to go forward-------------------------------------------------------------
	//---------if SetPos is greater than current actual then move to that position--------------------
	//---------else current position is greater, increase moduloturn count by 1 before set---------------
	IF moduloPositionDemand > _axis.NcToPlc.ModuloActPos THEN
		ModuloToAbs := (_Axis.NcToPlc.ModuloActTurns*_trackLength) + moduloPositionDemand;
	ELSE
		ModuloToAbs := ((_Axis.NcToPlc.ModuloActTurns + 1)*_trackLength) + moduloPositionDemand;
	END_IF
ELSE
	//--------if you want to go backwards--------------------------------
	//--------if setPos is less than current actual then move to that position---------------------
	//---------else current position is less, decrease moduloturn count by 1 before set------------
	IF moduloPositionDemand < _axis.NcToPlc.ModuloActPos THEN
		ModuloToAbs := (_Axis.NcToPlc.ModuloActTurns*_trackLength) + moduloPositionDemand;
	ELSE
		ModuloToAbs := ((_Axis.NcToPlc.ModuloActTurns-1)*_trackLength) + moduloPositionDemand;
		//ModuloToAbsolute := ((_Axis.NcToPlc.ModuloActTurns - 1)*GVLAxesRefs.iXTSTrackLength) + moduloPositionDemand;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverErrorId" Id="{85e52be8-fb52-4b48-89f9-88e6e667b6c9}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY MoverErrorId : dword]]></Declaration>
      <Get Name="Get" Id="{2524f66e-6f6a-491d-98b9-75207dd0a6c8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverErrorId := _MoverErrorId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b1aad33d-7a4e-4703-a4b4-39e672479a58}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MoverErrorId := MoverErrorId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoveTo" Id="{802770d2-418c-4abf-9f6e-2f2f834d1b61}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC MoveTo : BOOL
VAR_INPUT
	Position : MC_LREAL;
	Velocity : MC_LREAL;
	BackwardMove : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF isAtPosition(position := Position) THEN
	IF BackwardMove THEN
		_MoverState := XtsMoverStates.ReverseDone;
	ELSE
		_MoverState := XtsMoverStates.ForwardDone;
	END_IF
ELSE
	IF NOT axesMoveTo.Busy THEN
		axesMoveTo.MoveTo(Position := ModuloToAbs(Position, BackwardMove), Velocity := Velocity);
		MoveTo := TRUE;
		_targetPos := Position;
		IF BackwardMove THEN
			_MoverState := XtsMoverStates.ReverseMove;
		ELSE
			_MoverState := XtsMoverStates.ForwardMove;
		END_IF
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAxis" Id="{f15e318c-f9e6-4546-8878-95f37d7375ea}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD PUBLIC ResetAxis : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[axesReset.Execute();
axesMoveTo.Abort();
axesHalt.Abort();]]></ST>
      </Implementation>
    </Method>
    <Property Name="TrackLength" Id="{116ff8de-9ff5-436c-823e-86168491c26f}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC TrackLength : real]]></Declaration>
      <Get Name="Get" Id="{01704834-945e-4a8c-8860-b2032373f9c7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackLength := _trackLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{94849cb4-daa3-48e7-8098-f92fd5669104}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_trackLength := TrackLength;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Zones" Id="{2094122f-863f-4838-b012-c02940df54cf}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Zones : array[1..4] of dint]]></Declaration>
      <Get Name="Get" Id="{03c56746-7d54-4270-8205-3e573a9c6d3d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Zones := arrZones;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{85cf9cba-2830-4f13-bad6-06b10b6fdd3b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[arrZones := Zones;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ZoneVelocities" Id="{61ce55e3-da9e-4bce-bb48-49384c58a51c}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ZoneVelocities : array[1..4] of mc_lreal]]></Declaration>
      <Get Name="Get" Id="{4971ca1b-8f69-4d8b-a875-f336d7924d0b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ZoneVelocities := arrVelocities;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6a54a5b0-e3ce-4d43-81d9-926b43813517}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[arrVelocities := ZoneVelocities;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="XtsMover_1">
      <LineId Id="9" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="95" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Acceleration.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Acceleration.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.AxisModuloPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.AxisModuloPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.AxisRef.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.AxisState.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.AxisState.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Deceleration.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Deceleration.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.DisableAxis">
      <LineId Id="31" Count="13" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.EnableAxis">
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Gap.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Gap.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.HaltAxis">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.hasError">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.IdentInGroup.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.IdentInGroup.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.isAtPosition">
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.isDetected">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="2" />
    </LineIds>
    <LineIds Name="XtsMover_1.isEnabled">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Jerk.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Jerk.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.ModuloToAbs">
      <LineId Id="6" Count="19" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.MoverErrorId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.MoverErrorId.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.MoveTo">
      <LineId Id="53" Count="0" />
      <LineId Id="60" Count="3" />
      <LineId Id="54" Count="1" />
      <LineId Id="26" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="56" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="64" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.ResetAxis">
      <LineId Id="20" Count="0" />
      <LineId Id="14" Count="1" />
    </LineIds>
    <LineIds Name="XtsMover_1.TrackLength.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.TrackLength.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Zones.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.Zones.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.ZoneVelocities.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMover_1.ZoneVelocities.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>