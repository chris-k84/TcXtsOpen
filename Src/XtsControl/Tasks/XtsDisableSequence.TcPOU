<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="XtsDisableSequence" Id="{ea1d04be-726e-4c7d-baa7-17245f825e22}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}
FUNCTION_BLOCK XtsDisableSequence IMPLEMENTS ITask
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_collisionGroup : ICollisionGroup;
	disableGrp : DisableGroup(_collisionGroup.GroupRef);
	removeAllAxes : RemoveAllMoverFromGroup(_collisionGroup.GroupRef);
	grpStop : StopMoverGroup(_collisionGroup.GroupRef);
	State : INT;
	DisableTrigger: BOOL;
	moverNumbers : DINT := 1;
	AllMoversDisabled: BOOL;
	_busy : BOOL;
	_done : BOOL;
	_Error : BOOL;
	i: DINT;
END_VAR
VAR_IN_OUT
	arrMovers : ARRAY[*] OF FB_Mover;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE State OF
	0:
		IF DisableTrigger THEN
			DisableTrigger := FALSE;
			_busy := TRUE;
			_done := FALSE;
			_Error := FALSE;
			IF _collisionGroup.GroupState = CAGroupStatus.mcGroupStateMoving THEN
				grpStop.Execute();
				State := 10;
			ELSE
				State := 20;
				removeAllAxes.RemoveAllMover();
			END_IF
		END_IF
		
	10:
		IF grpStop.Done THEN
			State := 20;
			removeAllAxes.RemoveAllMover();
		END_IF
	
	20:
		IF removeAllAxes.Done THEN
			FOR moverNumbers := LOWER_BOUND(arrMovers,1) TO UPPER_BOUND(arrMovers,1) DO
				arrMovers[moverNumbers].DisableAxis();
			END_FOR
			State := 30;
		END_IF
		
	30:
		AllMoversDisabled := TRUE;
		FOR moverNumbers := LOWER_BOUND(arrMovers,1) TO UPPER_BOUND(arrMovers,1) DO
			AllMoversDisabled := TRUE AND NOT arrMovers[moverNumbers].isEnabled();
		END_FOR
		IF AllMoversDisabled THEN
			State := 50;
			disableGrp.Execute();
		END_IF
		
	50:
		IF disableGrp.Done THEN
			State := 0;
			grpStop.Deceleration := Tc3_Mc3Definitions.MC_DEFAULT;
			grpStop.Jerk := Tc3_Mc3Definitions.MC_DEFAULT;
			_busy := FALSE;
			_done := true;
		END_IF
END_CASE

disableGrp();
removeAllAxes();
grpStop();]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{42f8e30f-5183-4033-a58c-7a7275c4a0aa}">
      <Declaration><![CDATA[METHOD Abort : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisableTrigger := FALSE;
State := 0;
disableGrp.Abort();
removeAllAxes.Abort();
grpStop.Abort();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{37ba4712-426e-4d01-b6fa-02acf9485af6}">
      <Declaration><![CDATA[PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b1cafe39-683e-4a4e-ad04-65ee0fb4226f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := _busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Disable" Id="{bc7f7a10-79ff-4b84-9b1c-517283c2b5cf}">
      <Declaration><![CDATA[METHOD Disable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisableTrigger := true;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Done" Id="{eccd7fb2-badb-4f5f-b33a-bdf6f0658780}">
      <Declaration><![CDATA[PROPERTY Done : BOOL
]]></Declaration>
      <Get Name="Get" Id="{a7bff8ff-4014-4380-88b9-a282e05e33b0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := _done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{f6b1ac03-fad4-4a5f-9f7c-51705f61776e}">
      <Declaration><![CDATA[PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{7aba3a07-6d5a-419b-af00-dbecd406527c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := _Error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{e45d29f8-5ba5-4882-9a4e-6018e585a259}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	collisionGroup : ICollisionGroup;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_collisionGroup := collisionGroup;
disableGrp.FB_init(FALSE, FALSE, CAGroup := collisionGroup);
removeAllAxes.FB_init(FALSE, FALSE, CAGroup := collisionGroup);
grpStop.FB_init(FALSE,FALSE,CAGroup := collisionGroup);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetEmergencyDynamics" Id="{b5418f68-dda4-4664-b66b-f4c1bc501dec}">
      <Declaration><![CDATA[METHOD SetEmergencyDynamics : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[grpStop.Deceleration := Tc3_Mc3Definitions.MC_MAXIMUM;
grpStop.Jerk := Tc3_Mc3Definitions.MC_MAXIMUM;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsDisableSequence">
      <LineId Id="3" Count="3" />
      <LineId Id="8" Count="38" />
      <LineId Id="48" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Abort">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Busy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Disable">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Done.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.FB_init">
      <LineId Id="3" Count="0" />
      <LineId Id="6" Count="2" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.SetEmergencyDynamics">
      <LineId Id="3" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>