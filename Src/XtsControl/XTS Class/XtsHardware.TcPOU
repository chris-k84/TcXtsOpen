<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="XtsHardware" Id="{fdc8b717-d16e-40a4-b579-c07cec9aa7e9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsHardware
VAR_INPUT
END_VAR
VAR_OUTPUT
	XtsHardwareOK : BOOL;
	Xts48VStanding : BOOL;
	Xts24VStanding : BOOL;
END_VAR
VAR
	XtsIoEnvironment : Tc3_XTS_Utility.FB_TcIoXtsEnvironment;
	bInit: BOOL;
	bMoverIdDetectionError		: BOOL;
	bMoverIdDetectionActive		: BOOL;
	bMoverIdDetected : BOOL;
	f24V: ARRAY[1..nModuleNumber] OF LREAL;
	f48V: ARRAY[1..nModuleNumber] OF LREAL;
	CurrentLive : ARRAY[1..nModuleNumber] OF LREAL;
	MaxCurrent : ARRAY [1..nModuleNumber] OF DINT;
	nModuleCounter : INT := 1;
	nForCounter1 : UDINT;
	i: INT;
	State :(
        Init,                                               
		Redetect,
		MoversValid,                                 
        AllMoversFound,
		MoverIdDetection,
		HWReady);
END_VAR
VAR CONSTANT
	nModuleNumber  : INT := 16;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
	IF XtsIoEnvironment.Init(TRUE) THEN
		XtsIoEnvironment.Init(FALSE);
		bInit := TRUE;
	END_IF
	RETURN;
END_IF

CASE State OF
	Init:
		IF GetActiveTracks() THEN
			State := Redetect;
		END_IF
		
	Redetect:
		IF TriggerMoverDetection() THEN
			State := MoversValid;
		END_IF
		
	MoversValid:
		IF getAllMoversValid() THEN
			State := AllMoversFound;
		END_IF
	
	AllMoversFound:
		IF getMoversDetected() THEN
			State := MoverIdDetection;
		END_IF
		
	MoverIdDetection:
		IF TriggerMoverID() THEN
			State := HWReady;
		END_IF
	
	HWReady:
		Xts48VStanding := TRUE;
		Xts24VStanding := TRUE;
		FOR i := 1 TO nModuleNumber DO
			IF f48V[i] < 46000 THEN
				Xts48VStanding := FALSE;
			END_IF
			IF f24V[i] < 22000 THEN
				Xts24VStanding := FALSE;
			END_IF
		END_FOR
		XtsHardwareOK := Xts48VStanding AND Xts24VStanding;
	
END_CASE


getModuleInfoData();




]]></ST>
    </Implementation>
    <Method Name="GetActiveTracks" Id="{ef675147-48c6-4156-bca7-ee67e48b4aaa}">
      <Declaration><![CDATA[METHOD PUBLIC GetActiveTracks : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR nForCounter1:=1 TO XtsIoEnvironment.XpuTcIo(1).GetTrackCount() DO
	XtsIoEnvironment.XpuTcIo(1).TrackTcIo(INT_TO_UINT(nForCounter1)).SetIsIncludedInDetection(FALSE);
END_FOR

FOR nForCounter1:=1 TO XtsIoEnvironment.XpuTcIo(1).GetTrackCount() DO
	XtsIoEnvironment.XpuTcIo(1).TrackTcIo(INT_TO_UINT(nForCounter1)).SetIsIncludedInDetection(TRUE);
	GetActiveTracks := TRUE;
END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="getAllMoversValid" Id="{ae944bc3-2c4d-4e0e-be98-33dfbe9c20d4}">
      <Declaration><![CDATA[METHOD getAllMoversValid : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ IF XtsIoEnvironment.XpuTcIo(1).GetAreAllPositionsValid() THEN
	 getAllMoversValid := TRUE;
	 Logger.Send(TC_EVENTS.XtsHardwareEvents.AllMoversValid,'');
 END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getModuleInfoData" Id="{5df1d418-67cd-4681-b784-eb84b54fcac5}">
      <Declaration><![CDATA[METHOD getModuleInfoData : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.Update() THEN
	CurrentLive[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.OverallCurrent;
	MaxCurrent[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.MaxOverallCurrentLast500ms;
	f24V[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.AuxiliaryVoltage24V;
	f48V[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.DcLinkVoltage;
	//Increase Module count
	IF nModuleCounter = nModuleNumber THEN
		nModuleCounter:=1;
	ELSE
		nModuleCounter:=nModuleCounter+1;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getMoversDetected" Id="{812da94e-a8c0-4d51-9f58-8d59861ca284}">
      <Declaration><![CDATA[METHOD getMoversDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XtsIoEnvironment.XpuTcIo(1).GetDetectedMoverCount() = XtsIoEnvironment.XpuTcIo(1).GetExpectedMoverCount() THEN
	getMoversDetected := TRUE;
ELSE
	getMoversDetected := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverDetection" Id="{31f9ff4a-273c-4d84-b7c3-87644d344482}">
      <Declaration><![CDATA[METHOD TriggerMoverDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XtsIoEnvironment.XpuTcIo(1).TriggerRedetection();
TriggerMoverDetection := true;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverID" Id="{fba9ec64-a56d-44cb-8f57-71a89622c1d8}">
      <Declaration><![CDATA[METHOD TriggerMoverID : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mover1 Functionality		
// Check if "MoverIdDetectionMode" has been activated under the XtsProcessingUnit object.
IF XtsIoEnvironment.XpuTcIo(1).GetMoverIdDetectionMode() = E_MoverIdDetectionMode.Mover1
	OR XtsIoEnvironment.XpuTcIo(1).GetMoverIdDetectionMode() = 2 THEN

	// Check if the "MoverIdDetection" has already been started or the Mover1 was found.
	IF NOT (bMoverIdDetectionActive OR bMoverIdDetected) THEN
		// Trigger the "MoverIdDetection".
		XtsIoEnvironment.XpuTcIo(1).TriggerMoverIdDetection();
	END_IF

	// Check for error or success of "MoverIdDetection".
	bMoverIdDetectionError 	:= XtsIoEnvironment.XpuTcIo(1).GetHasMoverIdDetectionError();
	bMoverIdDetected 	:= XtsIoEnvironment.XpuTcIo(1).GetIsMoverIdDetectionValid();
	bMoverIdDetectionActive	:= XtsIoEnvironment.XpuTcIo(1).GetIsMoverIdDetectionActive();
	
	// If the detection has an error, check for errors in output and try again.
	IF bMoverIdDetectionError THEN
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionFailed,'');
		RETURN; 
	END_IF

	// Do not process any further until the "MoverId" was deteced.
	IF NOT bMoverIdDetected THEN
		RETURN;
	END_IF	
	TriggerMoverID := TRUE;	
	Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionComplete,'');
ELSE
	TriggerMoverID := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.StandardMoverNumberingComplete,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsHardware">
      <LineId Id="206" Count="6" />
      <LineId Id="465" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="475" Count="2" />
      <LineId Id="469" Count="0" />
      <LineId Id="479" Count="2" />
      <LineId Id="478" Count="0" />
      <LineId Id="489" Count="1" />
      <LineId Id="492" Count="1" />
      <LineId Id="491" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="484" Count="1" />
      <LineId Id="471" Count="0" />
      <LineId Id="494" Count="2" />
      <LineId Id="486" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="500" Count="8" />
      <LineId Id="498" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="223" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.GetActiveTracks">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getAllMoversValid">
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getModuleInfoData">
      <LineId Id="6" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getMoversDetected">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverDetection">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverID">
      <LineId Id="40" Count="30" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>