<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="DualModuleTmsSwitch" Id="{73ef316f-86b5-4cc1-962a-15251e072db1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK DualModuleTmsSwitch IMPLEMENTS ITF_TmsSwitch
VAR_INPUT
	StateMachine : IPmlStateMachine;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_exchangeMover : IMover;
	_currentStation : ITF_SwitchStation;
	_demandPosition : MC_LREAL;
	_upPosition : MC_LREAL;
	_middlePosition : MC_LREAL;
	_downPosition : MC_LREAL;
	SwitchVelocity : MC_LREAL := 100.0;
	switchAxis : MC2_Axis_Base;
	arrTrackIds : ARRAY[1..4] OF OTCID := [16#010100F0,16#010100E0,16#010100D0,16#01010790];
	State :(
        Init,                                               
		Ready,                                 
        Enabling,
		Enabled,
		Resetting,
		Waiting,
		AssignMover,
		Moving,
		Done,
		Disabling); 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE State OF
	Init:
		IF NOT switchAxis.hasError() THEN
			State := Ready;
		END_IF
		
	Ready:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Clearing THEN
			switchAxis.EnableAxis();
			State := Enabling;
		END_IF	
		
	Enabling:
		IF switchAxis.isEnabled() THEN
			State := Enabled;
		END_IF
		
	Enabled:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Resetting THEN
			IF switchAxis.MoveTo(Position := _middlePosition, Velocity := 100.0) THEN
				State := Resetting;
			END_IF
		END_IF
		
	Resetting:
		IF switchAxis.isAtPosition(position := MiddlePosition) THEN
			State := Waiting;
		END_IF	
	
	Waiting:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			switchAxis.DisableAxis();
			State := Disabling;
		END_IF
		
	AssignMover:
		IF FindNewTrack() <> 0 THEN
			State := Moving;
		END_IF
		
	Moving:	
		IF switchAxis.isAtPosition(_demandPosition) THEN
			State := Done;
		END_IF
	
	Done:
		IF _currentStation.SwitchMoveComplete() THEN
			State := Waiting;
			_exchangeMover := 0;
			_currentStation := 0;
		END_IF	
	
	Disabling:
		IF NOT switchAxis.isEnabled() THEN
			State := Init;
		END_IF

END_CASE

switchAxis();]]></ST>
    </Implementation>
    <Property Name="DownPosition" Id="{513dbdb6-135b-46f3-8125-fc598ca8ce55}">
      <Declaration><![CDATA[PROPERTY DownPosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{0db03243-0f6a-422c-b802-c5cc5c312e69}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DownPosition := _downPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bbe8d847-123b-4a68-86bf-de9a0ef6b8f8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_downPosition := DownPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ExchangeMover" Id="{b5f9d3d9-6f5f-4aaa-9562-32ebf7d41c8c}">
      <Declaration><![CDATA[METHOD PUBLIC ExchangeMover : BOOL
VAR_INPUT
	Mover : IMover;
	currentStation : ITF_SwitchStation;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _exchangeMover = 0 THEN
	_exchangeMover := Mover;	
	_currentStation := currentStation;
	ExchangeMover := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindNewTrack" Id="{64ec7bf3-c827-4335-99e4-b7418c5014bb}">
      <Declaration><![CDATA[METHOD PUBLIC FindNewTrack : OTCID
VAR_INPUT
END_VAR
VAR
	iTmsMover : ITmsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(_exchangeMover,iTmsMover) THEN
	IF Switch = SwitchState.Up THEN
		IF iTmsMover.ActiveTrack = arrTrackIds[3] THEN
			iTmsMover.ActivateTrack(newTrack := arrTrackIds[2]);
		END_IF
	ELSIF Switch = SwitchState.Middle THEN
		IF iTmsMover.ActiveTrack = arrTrackIds[1] THEN
			iTmsMover.ActivateTrack(newTrack := arrTrackIds[4]);
		ELSIF iTmsMover.ActiveTrack = arrTrackIds[2] THEN
			iTmsMover.ActivateTrack(newTrack := arrTrackIds[3]);
		END_IF
	ELSE
		IF iTmsMover.ActiveTrack = arrTrackIds[4] THEN
			iTmsMover.ActivateTrack(newTrack := arrTrackIds[1]);	
		END_IF
	END_IF
END_IF
FindNewTrack := iTmsMover.ActiveTrack;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MiddlePosition" Id="{a99e862a-0b65-4510-8ab1-7f0732d4e0cc}">
      <Declaration><![CDATA[PROPERTY PUBLIC MiddlePosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{b34f701f-b631-47d2-ae36-146e9c98f154}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MiddlePosition := _middlePosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9fbf98f9-449b-4537-a874-c25bab15bdec}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_middlePosition := MiddlePosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoveTo" Id="{fd17c823-afe7-4820-9dad-912e69242e2b}">
      <Declaration><![CDATA[METHOD PUBLIC MoveTo : BOOL
VAR_INPUT
	positionState : SwitchState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE positionState OF
	SwitchState.Down:
		IF NOT switchAxis.isAtPosition(position := DownPosition) THEN
			IF switchAxis.MoveTo(Position := DownPosition, Velocity := SwitchVelocity) THEN
				MoveTo := TRUE;
				State := AssignMover;
				_demandPosition := DownPosition;
			END_IF
		END_IF	
	SwitchState.Middle:
		IF NOT switchAxis.isAtPosition(position := MiddlePosition) THEN
			IF switchAxis.MoveTo(Position := MiddlePosition, Velocity := SwitchVelocity) THEN
				MoveTo := TRUE;
				State := AssignMover;
				_demandPosition := MiddlePosition;
			END_IF
		END_IF	
	SwitchState.Up:
		IF NOT switchAxis.isAtPosition(position := UpPosition) THEN
			IF switchAxis.MoveTo(Position := UpPosition, Velocity := SwitchVelocity) THEN
				MoveTo := TRUE;
				State := AssignMover;
				_demandPosition := UpPosition;
			END_IF
		END_IF	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Switch" Id="{cea7677b-4e3e-436d-9a14-24ba96282e4e}">
      <Declaration><![CDATA[PROPERTY PUBLIC Switch : SwitchState]]></Declaration>
      <Get Name="Get" Id="{955c8029-4c60-4733-8b6b-b2d2d74760a8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF switchAxis.isAtPosition(position := UpPosition) THEN
	Switch := SwitchState.Up;
ELSIF switchAxis.isAtPosition(position := MiddlePosition) THEN
	Switch := SwitchState.Middle;
ELSIF switchAxis.isAtPosition(position := DownPosition) THEN
	Switch := SwitchState.Down;
ELSE
	Switch := SwitchState.Moving;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="UpperPosition" Id="{60deb3c6-3252-44f3-b5cb-16a8e597aa4b}">
      <Declaration><![CDATA[PROPERTY PUBLIC UpperPosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{f099d5c2-280a-458c-acd7-5c600c7a7194}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[UpperPosition := _upPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bab004d1-8ed7-4888-a7ae-1210a1689e53}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_upPosition := UpperPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="DualModuleTmsSwitch">
      <LineId Id="74" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="93" Count="1" />
      <LineId Id="146" Count="1" />
      <LineId Id="149" Count="1" />
      <LineId Id="148" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="151" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="309" Count="1" />
      <LineId Id="314" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="200" Count="1" />
      <LineId Id="305" Count="2" />
      <LineId Id="237" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="240" Count="1" />
      <LineId Id="337" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="315" Count="2" />
      <LineId Id="132" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.DownPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.DownPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.ExchangeMover">
      <LineId Id="7" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.FindNewTrack">
      <LineId Id="7" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="3" />
      <LineId Id="30" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.MiddlePosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.MiddlePosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.MoveTo">
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="110" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="114" Count="2" />
      <LineId Id="124" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="81" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.Switch.Get">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="17" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.UpperPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="DualModuleTmsSwitch.UpperPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>