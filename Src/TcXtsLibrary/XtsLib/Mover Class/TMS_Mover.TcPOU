<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TMS_Mover" Id="{6b131325-7dfb-4240-b139-8c4216101462}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TMS_Mover EXTENDS FB_Mover IMPLEMENTS ITmsMover
VAR_INPUT
	XtsTrack : IXtsTrack;
	StateMachine : IPmlStateMachine;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_activateTrack : ActivateTrackForMover(_axis);
	mcReadTrackPositions : Tc3_McCollisionAvoidance.MC_ReadTrackPositions;
	MoverActiveTrack : OTCID;
	_stOptions : ST_MoveAbsoluteCAOptions;
	bInit : BOOL;
	ipTcIoXtsMover			: I_TcIoXtsXpuMover;
	stTmsActPositions			: ST_PositionInfo;
END_VAR
VAR_IN_OUT
	StationArray : ARRAY[*] OF IProcess;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
	IF MoverActiveTrack <> 0 AND _identInGroup <> 0 THEN
		ActivateTrack(newTrack := MoverActiveTrack);
		bInit := TRUE;
	END_IF
	RETURN;
END_IF
SUPER^();
IF _identInGroup <> 0 THEN
	mcReadTrackPositions(
		Axis:= THIS^._axis, 
		Enable:= TRUE, 
		Valid=> , 
		Busy=> , 
		TrackPosition=> , 
		TrackId=> , 
		PartPosition=> , 
		PartId=> , 
		Error=> , 
		ErrorId=> );
END_IF
_activateTrack();
IF _activateTrack.Done THEN 
	_stOptions.PositionReferenceSystem := MoverActiveTrack := _activateTrack.NewTrackId;
	axesMoveTo.Options := _stOptions;
END_IF

IF ipTcIoXtsMover <> 0 THEN
	stTmsActPositions:=ipTcIoXtsMover.GetPositionInfo();
END_IF

]]></ST>
    </Implementation>
    <Method Name="ActivateTrack" Id="{5f8dc4a4-b7cd-44e5-baab-59a89ea4550d}">
      <Declaration><![CDATA[METHOD ActivateTrack : BOOL
VAR_INPUT
	newTrack : OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _activateTrack.Busy THEN
	_activateTrack.Execute(Track := newTrack);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModuloToAbs" Id="{e9552041-082e-41cb-bbe3-2647c17c6f1c}">
      <Declaration><![CDATA[METHOD protected ModuloToAbs : LREAL
VAR_INPUT
	moduloPositionDemand: MC_LREAL;
	_backwardsAllowed : BOOL;
END_VAR

VAR
	moduloTurn: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Crate moduloturns value:
moduloTurn := stTmsActPositions.fTrackPosition/_trackLength;

//---------code to set actual position from modulo command----------------------
IF NOT _backwardsAllowed THEN
	//--------if you want to go forward-------------------------------------------------------------
	//---------if SetPos is greater than current actual then move to that position--------------------
	//---------else current position is greater, increase moduloturn count by 1 before set---------------
	IF moduloPositionDemand > _axis.NcToPlc.ModuloActPos THEN
		ModuloToAbs := (moduloTurn*_trackLength) + moduloPositionDemand;
	ELSE
		ModuloToAbs := ((moduloTurn + 1)*_trackLength) + moduloPositionDemand;
	END_IF
ELSE
	//--------if you want to go backwards--------------------------------
	//--------if setPos is less than current actual then move to that position---------------------
	//---------else current position is less, decrease moduloturn count by 1 before set------------
	IF moduloPositionDemand < _axis.NcToPlc.ModuloActPos THEN
		ModuloToAbs := (moduloTurn*_trackLength) + moduloPositionDemand;
	ELSE
		ModuloToAbs := ((moduloTurn)*_trackLength) + moduloPositionDemand;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveTo" Id="{cb5563f4-b88f-463c-953d-1f3d7238a315}">
      <Declaration><![CDATA[METHOD PUBLIC MoveTo : BOOL
VAR_INPUT
	Position : MC_LREAL;
	Velocity : MC_LREAL;
	BackwardMove : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT isAtPosition(position := Position) THEN
	IF NOT axesMoveTo.Busy THEN
		axesMoveTo.MoveTo(Position := THIS^.ModuloToAbs(Position, BackwardMove), Velocity := Velocity);
		MoveTo := TRUE;
		_targetPos := Position;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetMoverInterface" Id="{c6449f51-a9d5-4b22-b175-863ee923058b}">
      <Declaration><![CDATA[METHOD PUBLIC SetMoverInterface : BOOL
VAR_INPUT
	MoverInterface : I_TcIoXtsXpuMover;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ipTcIoXtsMover := MoverInterface;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTrackId" Id="{f860ba64-8391-49dd-9256-26b78ef744f7}">
      <Declaration><![CDATA[METHOD PUBLIC SetTrackId : BOOL
VAR_INPUT
	ActiveTrack : OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MoverActiveTrack := ActiveTrack;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TMS_Mover">
      <LineId Id="99" Count="2" />
      <LineId Id="122" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="103" Count="15" />
      <LineId Id="140" Count="0" />
      <LineId Id="142" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="162" Count="3" />
      <LineId Id="170" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.ActivateTrack">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="TMS_Mover.ModuloToAbs">
      <LineId Id="28" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="8" Count="17" />
      <LineId Id="27" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.MoveTo">
      <LineId Id="53" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="64" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.SetMoverInterface">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.SetTrackId">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>