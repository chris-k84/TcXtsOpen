<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TMS_Mover" Id="{6b131325-7dfb-4240-b139-8c4216101462}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TMS_Mover EXTENDS FB_Mover IMPLEMENTS ITmsMover
VAR
	ActivateATrack : ActivateTrackForMover(_axis);
	mcReadTrackPositions : Tc3_McCollisionAvoidance.MC_ReadTrackPositions;
	axesMoveModuloTo 		: MoveModuloMoverToPosition(_axis) := (Gap := 100.0);
	_stOptions : ST_MoveAbsoluteCAOptions;
	ipTcIoXtsMover			: I_TcIoXtsXpuMover;
	stTmsActPositions			: ST_PositionInfo;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ActivateTrack" Id="{5f8dc4a4-b7cd-44e5-baab-59a89ea4550d}">
      <Declaration><![CDATA[METHOD ActivateTrack : BOOL
VAR_INPUT
	newTrack : OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT ActivateATrack.Busy THEN
	ActivateATrack.Execute(Track := newTrack);
	ActivateTrack := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ActiveTrack" Id="{57a3c436-4ed1-47e6-9026-bef04c939162}">
      <Declaration><![CDATA[PROPERTY ActiveTrack : OTCID]]></Declaration>
      <Get Name="Get" Id="{c72e2ae2-e105-4edf-83a4-44deb2f5b1cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ActiveTrack := stTmsActPositions.nTrackObjectid;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cycle" Id="{5ef04be8-b6db-4923-86bd-24d4d67b24fa}">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^();
IF _identInGroup <> 0 THEN
	mcReadTrackPositions(
		Axis:= THIS^._axis, 
		Enable:= TRUE, 
		Valid=> , 
		Busy=> , 
		TrackPosition=> , 
		TrackId=> , 
		PartPosition=> , 
		PartId=> , 
		Error=> , 
		ErrorId=> );
END_IF
ActivateATrack();
IF ActivateATrack.Done THEN 
	_stOptions.PositionReferenceSystem :=  ActivateATrack.NewTrackId;
	axesMoveModuloTo.Options := _stOptions;
END_IF

IF ipTcIoXtsMover <> 0 THEN
	stTmsActPositions:=ipTcIoXtsMover.GetPositionInfo();
END_IF

axesMoveModuloTo();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasCommand" Id="{5a17fcc3-6110-4d5b-bc24-ae196e62ddf3}">
      <Declaration><![CDATA[METHOD PUBLIC HasCommand : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HasCommand := axesMoveModuloTo.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isAtPosition" Id="{1cb134b7-8afd-4d69-a68f-d63401be7671}">
      <Declaration><![CDATA[METHOD isAtPosition : BOOL
VAR_INPUT
	position : MC_LREAL;
END_VAR

VAR
	moduloPos: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Create modulo position 
//moduloPos := LREAL_TO_DINT(stTmsActPositions.fTrackPosition) MOD LREAL_TO_DINT(_trackLength);
IF position > 1 THEN
	IF stTmsActPositions.fTrackPosition < position + 1 AND stTmsActPositions.fTrackPosition > position - 1 THEN
		isAtPosition := TRUE;
	END_IF  
ELSE
	IF stTmsActPositions.fTrackPosition < position + 1 AND stTmsActPositions.fTrackPosition > 0.0  
		OR stTmsActPositions.fTrackPosition < _trackLength AND stTmsActPositions.fTrackPosition > _trackLength - 1 THEN
		isAtPosition := TRUE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="isPastPosition" Id="{99c090fe-960e-4a77-8c44-cc361d9f893e}">
      <Declaration><![CDATA[METHOD PUBLIC isPastPosition : BOOL
VAR_INPUT
	position : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF position > 1 THEN
	IF stTmsActPositions.fTrackPosition > position THEN
		isPastPosition := TRUE;
	END_IF  
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveTo" Id="{cb5563f4-b88f-463c-953d-1f3d7238a315}">
      <Declaration><![CDATA[METHOD PUBLIC MoveTo : BOOL
VAR_INPUT
	Position : MC_LREAL;
	Velocity : MC_LREAL;
	BackwardMove : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.isAtPosition(position := Position) THEN
	IF NOT axesMoveModuloTo.Busy THEN
		THIS^.axesMoveModuloTo.MoveTo(Position := Position, Velocity := Velocity, Direction := Tc2_MC2.MC_Direction.MC_Positive_Direction, Turns := 0);
		MoveTo := TRUE;
		_targetPos := Position;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetMoverInterface" Id="{c6449f51-a9d5-4b22-b175-863ee923058b}">
      <Declaration><![CDATA[METHOD PUBLIC SetMoverInterface : BOOL
VAR_INPUT
	MoverInterface : I_TcIoXtsXpuMover;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ipTcIoXtsMover := MoverInterface;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TMS_Mover">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.ActivateTrack">
      <LineId Id="5" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.ActiveTrack.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.Cycle">
      <LineId Id="6" Count="23" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.HasCommand">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.isAtPosition">
      <LineId Id="27" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.isPastPosition">
      <LineId Id="7" Count="3" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.MoveTo">
      <LineId Id="78" Count="5" />
      <LineId Id="64" Count="0" />
    </LineIds>
    <LineIds Name="TMS_Mover.SetMoverInterface">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>