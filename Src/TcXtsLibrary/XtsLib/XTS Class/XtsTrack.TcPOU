<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="XtsTrack" Id="{9b564055-e4ef-49ec-91fa-4e16cb16a3f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsTrack IMPLEMENTS IXtsTrack
VAR_INPUT
	StateMachine : IPmlStateMachine;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_trackLength : MC_LREAL;
	mcCollisionGroup : CollisionGroup;
	XtsTrackHardware : XtsHardware;
	EnableSequence : XtsEnableSequence(mcCollisionGroup);
	DisableSequence : XtsDisableSequence(mcCollisionGroup);
	State :(
        Init,                                               
		Ready,                                 
        Enabling,
		Enabled,
		Resetting,
		Running,
		Disabling);  	
	i : DINT;
	AtHome: BOOL;
END_VAR
VAR_IN_OUT
	MoverArray : ARRAY[*] OF IMover;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[XtsTrackHardware();
CASE State OF
	Init:
		IF XtsTrackHardware.XtsHardwareOK THEN
			State := Ready;
		END_IF
		
	Ready:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Clearing THEN
			IF EnableSequence.Enable() THEN
				State := Enabling;
			END_IF	
		END_IF
		
	Enabling:
		IF EnableSequence.Done THEN
			State := Enabled;
			StateMachine.StateComplete();
		END_IF
		
	Enabled:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			DisableSequence.Disable();
			IF DisableSequence.Busy THEN
				State := Disabling;
			END_IF
		END_IF
		
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Resetting THEN
			FOR i := LOWER_BOUND(MoverArray,1) TO UPPER_BOUND(MoverArray,1) DO
				MoverArray[i].MoveTo(Position := 800.0, Velocity := 1000.0, BackwardMove := FALSE);
			END_FOR 
			State := Resetting;
		END_IF
		
	Resetting:
		AtHome := TRUE;
		FOR i := LOWER_BOUND(MoverArray,1) TO UPPER_BOUND(MoverArray,1) DO
				AtHome := AtHome AND MoverArray[i].isStationary();
		END_FOR 
		IF AtHome THEN
			State := Running;
			StateMachine.StateComplete();	
		END_IF
		
	Running:	
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			DisableSequence.Disable();
			IF DisableSequence.Busy THEN
				State := Disabling;
			END_IF
		END_IF
		
	Disabling:
		IF DisableSequence.Done THEN
			State := Ready;
			StateMachine.StateComplete();
		END_IF
	
END_CASE

EnableSequence(arrMovers := MoverArray);
DisableSequence(arrMovers := MoverArray);
mcCollisionGroup();]]></ST>
    </Implementation>
    <Property Name="TrackLength" Id="{4f244eb1-0239-423a-8574-4ccb93081483}">
      <Declaration><![CDATA[PROPERTY PUBLIC TrackLength : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{962af0e5-68fc-457e-92c4-2ae643ddac5e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackLength := _trackLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9d3b1cf5-ae4d-4af9-ab8c-ba44e55a4cc2}">
        <Declaration><![CDATA[PUBLIC 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_trackLength := TrackLength;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="XtsTrack">
      <LineId Id="246" Count="62" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.TrackLength.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.TrackLength.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>