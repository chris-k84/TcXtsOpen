<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="XtsTrack" Id="{9b564055-e4ef-49ec-91fa-4e16cb16a3f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsTrack IMPLEMENTS IXtsTrack
VAR_INPUT
	StateMachine : IPmlStateMachine;
	TmsSwitch : ITF_TmsSwitch;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_trackLength : MC_LREAL;
	_homePosition : MC_LREAL;
	HomeSpeed : MC_LREAL := 1000.0;
	mcCollisionGroup : CollisionGroup;
	XtsTrackHardware : XtsHardware;
	EnableSequence : XtsEnableSequence(mcCollisionGroup);
	DisableSequence : XtsDisableSequence(mcCollisionGroup);
	
	State :(
        Init,                                           
		Ready,                                 
        Enabling,
		ActivateTracks,
		Enabled,
		Resetting,
		Idle,
		Running,
		Starting,
		Disabling);  	
	i : DINT;
	AtHome: BOOL;
	_tracks : UDINT;
END_VAR
VAR_IN_OUT
	MoverArray : ARRAY[*] OF IMover;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[XtsTrackHardware(Tracks := _tracks, TmsSwitch := TmsSwitch);
CASE State OF
	Init:
		IF XtsTrackHardware.XtsHardwareOK THEN
			GetTMSMoverInterface();
			State := Ready;
		END_IF
		
	Ready:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Clearing THEN
			IF EnableSequence.Enable() THEN
				State := Enabling;
			END_IF	
		END_IF
		
	Enabling:
		IF EnableSequence.Done THEN
			State := ActivateTracks;
			StateMachine.SetStateComplete();
		END_IF
		
	ActivateTracks:
		IF ActivateTracksInMovers() THEN
			State := Enabled;
		END_IF
		
	Enabled:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting
			OR StateMachine.GetCurrentState() = E_PMLState.ePMLState_Stopping THEN
			DisableSequence.Disable();
			IF DisableSequence.Busy THEN
				State := Disabling;
			END_IF
		END_IF
		
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Resetting THEN
			IF MoverHomeSequence() THEN
				State := Resetting;
			END_IF
		END_IF
		
	Resetting:
		AtHome := TRUE;
		FOR i := LOWER_BOUND(MoverArray,1) TO UPPER_BOUND(MoverArray,1) DO
				AtHome := AtHome AND MoverArray[i].isStationary();
		END_FOR 
		IF AtHome THEN
			State := Idle;
			StateMachine.SetStateComplete();	
		END_IF
		
	Idle:	
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting
			OR StateMachine.GetCurrentState() = E_PMLState.ePMLState_Stopping THEN		
			DisableSequence.Disable();
			IF DisableSequence.Busy THEN
				State := Disabling;
			END_IF
		END_IF
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Starting THEN
			State := Starting;
		END_IF
		
	Starting:
		StateMachine.SetStateComplete();
		State := Running;
		
	Running:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting
			OR StateMachine.GetCurrentState() = E_PMLState.ePMLState_Stopping THEN
			DisableSequence.Disable();
			IF DisableSequence.Busy THEN
				State := Disabling;
			END_IF
		END_IF
		IF StateMachine.GetCurrentMode() = E_PMLState.ePMLState_Stopping THEN
			State := Enabled;
		END_IF
		
	Disabling:
		IF DisableSequence.Done THEN
			State := Ready;
			StateMachine.SetStateComplete();
		END_IF
	
END_CASE

EnableSequence(arrMovers := MoverArray);
DisableSequence(arrMovers := MoverArray);
mcCollisionGroup();]]></ST>
    </Implementation>
    <Method Name="ActivateTracksInMovers" Id="{f07dde83-d085-4cf6-bf9b-a6e81e2388f6}">
      <Declaration><![CDATA[METHOD PUBLIC ActivateTracksInMovers : BOOL
VAR_INPUT
END_VAR
VAR
	iTmsMover : ITmsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO UPPER_BOUND(MoverArray,1) DO
	IF __QUERYINTERFACE(MoverArray[i],iTmsMover) THEN
		iTmsMover.ActivateTrack(newTrack := iTmsMover.ActiveTrack);
	END_IF
END_FOR
ActivateTracksInMovers := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTMSMoverInterface" Id="{8a0ffa9f-0aa2-4c3c-a17d-9828995afbc3}">
      <Declaration><![CDATA[METHOD PUBLIC GetTMSMoverInterface : BOOL
VAR_INPUT
END_VAR
VAR
	iTmsMover : ITmsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO UPPER_BOUND(MoverArray,1) DO
	IF __QUERYINTERFACE(MoverArray[i],iTmsMover) THEN
		iTmsMover.SetMoverInterface(MoverInterface := XtsTrackHardware.GetMoverEnvInterface(DINT_TO_UINT(i)));
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="HomePosition" Id="{17d8d860-04e6-4fdc-9d29-4118d8eda955}">
      <Declaration><![CDATA[PROPERTY PUBLIC HomePosition : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{620c6b86-3832-4e3f-9912-ef7e2a1a6514}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HomePosition := _homePosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f190637e-4d36-4143-baa6-9db775f41566}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_homePosition := HomePosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoverHomeSequence" Id="{75121f0d-c39e-4602-b6e8-ef3881ab6657}">
      <Declaration><![CDATA[METHOD PUBLIC MoverHomeSequence : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := LOWER_BOUND(MoverArray,1) TO UPPER_BOUND(MoverArray,1) DO
	MoverArray[i].MoveTo(Position := _homePosition, Velocity := HomeSpeed, BackwardMove := FALSE);
END_FOR 
MoverHomeSequence := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TrackLength" Id="{4f244eb1-0239-423a-8574-4ccb93081483}">
      <Declaration><![CDATA[PROPERTY PUBLIC TrackLength : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{962af0e5-68fc-457e-92c4-2ae643ddac5e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackLength := _trackLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9d3b1cf5-ae4d-4af9-ab8c-ba44e55a4cc2}">
        <Declaration><![CDATA[PUBLIC 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_trackLength := TrackLength;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Tracks" Id="{7741ef95-8846-4cc0-aa81-d8ac8ebba247}">
      <Declaration><![CDATA[PROPERTY PUBLIC Tracks : UDINT]]></Declaration>
      <Get Name="Get" Id="{d2af4e1e-cc7b-4b07-b5c4-6cf6f6dda28f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tracks := _tracks;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bb7806ec-85ad-4f70-9606-95b8e7565462}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_tracks := Tracks;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="XtsTrack">
      <LineId Id="490" Count="27" />
      <LineId Id="647" Count="0" />
      <LineId Id="518" Count="22" />
      <LineId Id="649" Count="0" />
      <LineId Id="541" Count="5" />
      <LineId Id="568" Count="1" />
      <LineId Id="567" Count="0" />
      <LineId Id="570" Count="2" />
      <LineId Id="574" Count="0" />
      <LineId Id="559" Count="1" />
      <LineId Id="650" Count="0" />
      <LineId Id="562" Count="4" />
      <LineId Id="561" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="547" Count="10" />
      <LineId Id="78" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.ActivateTracksInMovers">
      <LineId Id="8" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.GetTMSMoverInterface">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.HomePosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.HomePosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.MoverHomeSequence">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.TrackLength.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.TrackLength.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.Tracks.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsTrack.Tracks.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>