<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XtsHardware" Id="{d04838d8-bc5b-437f-a587-8af72b2fc644}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsHardware EXTENDS CyclicBase IMPLEMENTS IXtsHardware
VAR_OUTPUT
	XtsHardwareOK : BOOL;
	Xts48VStanding : BOOL;
	Xts24VStanding : BOOL;
END_VAR
VAR
	_Tracks : UDINT;
	_TmsSwitch : ITF_TmsSwitch;
	XtsIoEnvironment : Tc3_XTS_Utility.FB_TcIoXtsEnvironment;
	bInit: BOOL;
	bMoverIdDetectionError		: BOOL;
	bMoverIdDetectionActive		: BOOL;
	bMoverIdDetected : BOOL;
	f24V: ARRAY[1..SystemParameters.nModuleNumber] OF UINT;
	f48V: ARRAY[1..SystemParameters.nModuleNumber] OF UINT;
	CurrentLive : ARRAY[1..SystemParameters.nModuleNumber] OF DINT;
	MaxCurrent : ARRAY [1..SystemParameters.nModuleNumber] OF DINT;
	nModuleCounter : UINT := 1;
	i: UDINT;
	State : XtsHardwareState;
	Logger : TcMessage_Ext;
	DetectedParts: UDINT;
	DetectedTracks : UDINT;
	DetectedModules : ARRAY[1..10] OF UDINT;
	PartIndex: UINT := 1;
	ModuleIndex : INT := 1;
	XtsHWInfo : XtsHardwareInfo;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{ddb20f02-7a0d-484d-bb45-cda4984dae2e}">
      <Declaration><![CDATA[METHOD Cycle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInit THEN
	IF XtsIoEnvironment.Init(TRUE) THEN
		XtsIoEnvironment.Init(FALSE);
		bInit := TRUE;
	END_IF
	RETURN;
END_IF

CASE State OF
	XtsHardwareState.Init:
		IF GetTrackAssembly() THEN
			State := XtsHardwareState.SetDetection;
		END_IF
	
	XtsHardwareState.SetDetection:
		IF SetTracksForDetection() THEN
			State := XtsHardwareState.Redetect;
		END_IF
		
	XtsHardwareState.Redetect:
		IF TriggerMoverDetection() THEN
			State := XtsHardwareState.MoversValid;
		END_IF
		
	XtsHardwareState.MoversValid:
		IF getAllMoversValid() THEN
			State := XtsHardwareState.AllMoversFound;
		END_IF
	
	XtsHardwareState.AllMoversFound:
		IF getMoversDetected() THEN
			State := XtsHardwareState.MoverIdDetection;
		END_IF
		
	XtsHardwareState.MoverIdDetection:
		IF TriggerMoverID() THEN
			State := XtsHardwareState.XtsMode;
		END_IF
	
	XtsHardwareState.XtsMode:
		IF IsInSim() THEN
			State := XtsHardwareState.HWReady;
		ELSE
			State := XtsHardwareState.CheckModuleVoltages;
		END_IF
		
	XtsHardwareState.CheckModuleVoltages:
		Xts48VStanding := TRUE;
		Xts24VStanding := TRUE;
		FOR i := 1 TO SystemParameters.nModuleNumber DO
			IF f48V[i] < 46000 THEN
				Xts48VStanding := FALSE;
			END_IF
			IF f24V[i] < 20400 THEN
				Xts24VStanding := FALSE;
			END_IF
		END_FOR
		IF Xts24VStanding AND Xts48VStanding THEN
			State := XtsHardwareState.HWReady;
		END_IF
	
	XtsHardwareState.HWReady:
		XtsHardwareOK := TRUE;
END_CASE

getModuleInfoData();

//CYCLIC update of info
XtsHWInfo.HWState := State;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getAllMoversValid" Id="{9dcfa32f-5a01-4e44-a98d-5148d4af1d1c}">
      <Declaration><![CDATA[METHOD getAllMoversValid : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ IF XtsIoEnvironment.XpuTcIo(1).GetAreAllPositionsValid() THEN
	 getAllMoversValid := TRUE;
	 Logger.Send(TC_EVENTS.XtsHardwareEvents.AllMoversValid,'');
 END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getModuleInfoData" Id="{b00af8fa-afc5-4832-90b7-0b785a21c099}">
      <Declaration><![CDATA[METHOD getModuleInfoData : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XtsIoEnvironment.XpuTcIo(1).PartTcIo(PartIndex).ModuleCoE(nModuleCounter).InfoData.Update() THEN
	CurrentLive[ModuleIndex]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(PartIndex).ModuleCoE(nModuleCounter).InfoData.OverallCurrent;
	MaxCurrent[ModuleIndex]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(PartIndex).ModuleCoE(nModuleCounter).InfoData.MaxOverallCurrentLast500ms;
	f24V[ModuleIndex]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(PartIndex).ModuleCoE(nModuleCounter).InfoData.AuxiliaryVoltage24V;
	f48V[ModuleIndex]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(PartIndex).ModuleCoE(nModuleCounter).InfoData.DcLinkVoltage;
	ModuleIndex := ModuleIndex + 1;
	IF nModuleCounter = DetectedModules[PartIndex] THEN
		nModuleCounter := 1;
		IF PartIndex = DetectedParts THEN
			PartIndex := 1;
			ModuleIndex := 1;
		ELSE
			PartIndex := PartIndex + 1;
		END_IF
	ELSE
		nModuleCounter := nModuleCounter + 1;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverEnvInterface" Id="{41d843cc-1e86-40a6-a335-47af7a169644}">
      <Declaration><![CDATA[METHOD PUBLIC GetMoverEnvInterface : I_TcIoXtsXpuMover
VAR_INPUT
	MoverNumber : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMoverEnvInterface := XtsIoEnvironment.XpuTcIo(1).MoverTcIo(MoverNumber);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getMoversDetected" Id="{f316fb3e-2c49-4310-aa99-6f4cd73010f0}">
      <Declaration><![CDATA[METHOD getMoversDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XtsIoEnvironment.XpuTcIo(1).GetDetectedMoverCount() = XtsIoEnvironment.XpuTcIo(1).GetExpectedMoverCount() THEN
	getMoversDetected := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversDetected,UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetExpectedMoverCount()));
ELSE
	getMoversDetected := FALSE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversNotFound,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTrackAssembly" Id="{86f5a3e9-8b84-41a1-b836-5c029b738ae6}">
      <Declaration><![CDATA[METHOD PUBLIC GetTrackAssembly : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DetectedTracks :=  XtsIoEnvironment.XpuTcIo(1).GetTrackCount();
IF DetectedTracks <> _Tracks THEN
	Logger.Send(TC_EVENTS.XtsHardwareEvents.XtsTracksCountError,'');
	RETURN; 
END_IF
DetectedParts := XtsIoEnvironment.XpuTcIo(1).GetPartCount();
FOR i := 1 TO UDINT_TO_UINT(DetectedParts) DO
	DetectedModules[i] := XtsIoEnvironment.XpuTcIo(1).PartTcIo(UDINT_TO_UINT(i)).GetModuleCount();
END_FOR
GetTrackAssembly := TRUE;

XtsHWInfo.NoOfModules := DetectedModules;
XtsHWInfo.NoOfParts := DetectedParts;
XtsHWInfo.NoOfTracks := DetectedTracks;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsHardwareOK" Id="{ec677acd-6939-4fee-b341-e9e01a4c1d62}">
      <Declaration><![CDATA[METHOD IsHardwareOK : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsHardwareOK := XtsHardwareOK;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInSim" Id="{7079e35e-0b08-4e1a-90dd-d5ff9bd0268d}">
      <Declaration><![CDATA[METHOD IsInSim : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  XtsIoEnvironment.XpuTcIo(1).GetOperationMode() = OperationMode.Simulation THEN
	IsInSim := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.XtsInSimulationMode,'');
ELSE
	IsInSim := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTracksForDetection" Id="{51fb8179-4891-4124-a519-72890ea8063e}">
      <Declaration><![CDATA[METHOD SetTracksForDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO XtsIoEnvironment.XpuTcIo(1).GetTrackCount() DO
	XtsIoEnvironment.XpuTcIo(1).TrackTcIo(UDINT_TO_UINT(i)).SetIsIncludedInDetection(FALSE);
END_FOR

IF XtsIoEnvironment.XpuTcIo(1).GetTrackCount() = 1 THEN
	XtsIoEnvironment.XpuTcIo(1).TrackTcIo(1).SetIsIncludedInDetection(TRUE);
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetTrackCount()));
	SetTracksForDetection := TRUE;
ELSE
	CASE _TmsSwitch.Switch OF
		TmsSwitchPosition.Up: 
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(3).SetIsIncludedInDetection(TRUE);
		TmsSwitchPosition.Middle:
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(1).SetIsIncludedInDetection(TRUE);
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(2).SetIsIncludedInDetection(TRUE);
		TmsSwitchPosition.Down:
			;
	END_CASE
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetTrackCount()));
	SetTracksForDetection := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="TmsSwitch" Id="{dfa8d87d-e187-4046-b05f-e1646c940901}">
      <Declaration><![CDATA[PROPERTY TmsSwitch : ITF_TmsSwitch]]></Declaration>
      <Get Name="Get" Id="{f26840f8-6d99-4974-8003-3ba65c06a58a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TmsSwitch := _TmsSwitch;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{576ab989-96cd-46e2-9b4b-630951eb0a9b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_TmsSwitch := TmsSwitch;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Tracks" Id="{ab8dae13-93ec-4120-a4fe-56573b46fe71}">
      <Declaration><![CDATA[PROPERTY Tracks : udint]]></Declaration>
      <Get Name="Get" Id="{3efb8fcd-df86-4534-9ed9-ed19babbbf2f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tracks := _Tracks;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c1a3c5b4-04fb-49d5-83cb-44a26f66101c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Tracks	 := Tracks;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TriggerMoverDetection" Id="{f0df76d0-8fd9-47e2-a4ee-b3636cb67c04}">
      <Declaration><![CDATA[METHOD TriggerMoverDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XtsIoEnvironment.XpuTcIo(1).TriggerRedetection();
Logger.Send(TC_EVENTS.XtsHardwareEvents.MoverDetectionInitiated,'');
TriggerMoverDetection := true;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverID" Id="{f94a4161-104a-471e-b20d-98cf1403fdab}">
      <Declaration><![CDATA[METHOD TriggerMoverID : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mover1 Functionality		
// Check if "MoverIdDetectionMode" has been activated under the XtsProcessingUnit object.
IF XtsIoEnvironment.XpuTcIo(1).GetMoverIdDetectionMode() = E_MoverIdDetectionMode.Mover1
	OR XtsIoEnvironment.XpuTcIo(1).GetMoverIdDetectionMode() = 2 THEN

	// Check if the "MoverIdDetection" has already been started or the Mover1 was found.
	IF NOT (bMoverIdDetectionActive OR bMoverIdDetected) THEN
		// Trigger the "MoverIdDetection".
		XtsIoEnvironment.XpuTcIo(1).TriggerMoverIdDetection();
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionStarted,'');
	END_IF

	// Check for error or success of "MoverIdDetection".
	bMoverIdDetectionError 	:= XtsIoEnvironment.XpuTcIo(1).GetHasMoverIdDetectionError();
	bMoverIdDetected 	:= XtsIoEnvironment.XpuTcIo(1).GetIsMoverIdDetectionValid();
	bMoverIdDetectionActive	:= XtsIoEnvironment.XpuTcIo(1).GetIsMoverIdDetectionActive();
	
	// If the detection has an error, check for errors in output and try again.
	IF bMoverIdDetectionError THEN
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionFailed,'');
		RETURN; 
	END_IF

	// Do not process any further until the "MoverId" was deteced.
	IF NOT bMoverIdDetected THEN
		RETURN;
	END_IF	
	TriggerMoverID := TRUE;	
	Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionComplete,'');
ELSE
	TriggerMoverID := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.StandardMoverNumberingComplete,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsHardware">
      <LineId Id="641" Count="1" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.Cycle">
      <LineId Id="6" Count="68" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getAllMoversValid">
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getModuleInfoData">
      <LineId Id="70" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="72" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="87" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="73" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.GetMoverEnvInterface">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getMoversDetected">
      <LineId Id="16" Count="5" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.GetTrackAssembly">
      <LineId Id="142" Count="14" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.IsHardwareOK">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.IsInSim">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.SetTracksForDetection">
      <LineId Id="31" Count="19" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TmsSwitch.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TmsSwitch.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.Tracks.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.Tracks.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverDetection">
      <LineId Id="11" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverID">
      <LineId Id="40" Count="8" />
      <LineId Id="73" Count="0" />
      <LineId Id="49" Count="21" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>