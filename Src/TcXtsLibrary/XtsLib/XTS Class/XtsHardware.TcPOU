<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="XtsHardware" Id="{d04838d8-bc5b-437f-a587-8af72b2fc644}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsHardware
VAR_INPUT
	Tracks : INT;
	TmsSwitch : ITF_TmsSwitch;
END_VAR
VAR_OUTPUT
	XtsHardwareOK : BOOL;
	Xts48VStanding : BOOL;
	Xts24VStanding : BOOL;
END_VAR
VAR
	XtsIoEnvironment : Tc3_XTS_Utility.FB_TcIoXtsEnvironment;
	bInit: BOOL;
	bMoverIdDetectionError		: BOOL;
	bMoverIdDetectionActive		: BOOL;
	bMoverIdDetected : BOOL;
	f24V: ARRAY[1..SystemParameters.nModuleNumber] OF LREAL;
	f48V: ARRAY[1..SystemParameters.nModuleNumber] OF LREAL;
	CurrentLive : ARRAY[1..SystemParameters.nModuleNumber] OF LREAL;
	MaxCurrent : ARRAY [1..SystemParameters.nModuleNumber] OF DINT;
	nModuleCounter : INT := 1;
	nForCounter1 : UDINT;
	i: INT;
	State :(
        Init,                                               
		Redetect,
		MoversValid,                                 
        AllMoversFound,
		MoverIdDetection,
		XTSMode,
		CheckModuleVoltages,
		HWReady);
	Logger : TcMessage_Ext;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
	IF XtsIoEnvironment.Init(TRUE) THEN
		XtsIoEnvironment.Init(FALSE);
		bInit := TRUE;
	END_IF
	RETURN;
END_IF

CASE State OF
	Init:
		IF GetActiveTracks() THEN
			State := Redetect;
		END_IF
		
	Redetect:
		IF TriggerMoverDetection() THEN
			State := MoversValid;
		END_IF
		
	MoversValid:
		IF getAllMoversValid() THEN
			State := AllMoversFound;
		END_IF
	
	AllMoversFound:
		IF getMoversDetected() THEN
			State := MoverIdDetection;
		END_IF
		
	MoverIdDetection:
		IF TriggerMoverID() THEN
			State := XtsMode;
		END_IF
	
	XtsMode:
		IF IsInSim() THEN
			State := HWReady;
		ELSE
			State := CheckModuleVoltages;
		END_IF
		
	CheckModuleVoltages:
		Xts48VStanding := TRUE;
		Xts24VStanding := TRUE;
		FOR i := 1 TO SystemParameters.nModuleNumber DO
			IF f48V[i] < 46000 THEN
				Xts48VStanding := FALSE;
			END_IF
			IF f24V[i] < 22000 THEN
				Xts24VStanding := FALSE;
			END_IF
		END_FOR
		IF Xts24VStanding AND Xts48VStanding THEN
			State := HWReady;
		END_IF
	
	HWReady:
		XtsHardwareOK := TRUE;
END_CASE

//Logger();
getModuleInfoData();




]]></ST>
    </Implementation>
    <Method Name="GetActiveTracks" Id="{86f5a3e9-8b84-41a1-b836-5c029b738ae6}">
      <Declaration><![CDATA[METHOD PUBLIC GetActiveTracks : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XtsIoEnvironment.XpuTcIo(1).GetTrackCount() <> Tracks THEN
	Logger.Send(TC_EVENTS.XtsHardwareEvents.XtsTracksCountError,'');
	RETURN; 
END_IF

FOR nForCounter1:=1 TO XtsIoEnvironment.XpuTcIo(1).GetTrackCount() DO
	XtsIoEnvironment.XpuTcIo(1).TrackTcIo(UDINT_TO_UINT(nForCounter1)).SetIsIncludedInDetection(FALSE);
END_FOR

IF XtsIoEnvironment.XpuTcIo(1).GetTrackCount() = 1 THEN
	XtsIoEnvironment.XpuTcIo(1).TrackTcIo(1).SetIsIncludedInDetection(TRUE);
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetTrackCount()));
	GetActiveTracks := TRUE;
ELSE
	CASE TmsSwitch.Switch OF
		0: 
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(6).SetIsIncludedInDetection(TRUE);
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(5).SetIsIncludedInDetection(TRUE);
		1:
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(1).SetIsIncludedInDetection(TRUE);
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(2).SetIsIncludedInDetection(TRUE);
		2:
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(3).SetIsIncludedInDetection(TRUE);
			XtsIoEnvironment.XpuTcIo(1).TrackTcIo(4).SetIsIncludedInDetection(TRUE);
	END_CASE
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetTrackCount()));
	GetActiveTracks := TRUE;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="getAllMoversValid" Id="{9dcfa32f-5a01-4e44-a98d-5148d4af1d1c}">
      <Declaration><![CDATA[METHOD getAllMoversValid : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ IF XtsIoEnvironment.XpuTcIo(1).GetAreAllPositionsValid() THEN
	 getAllMoversValid := TRUE;
	 Logger.Send(TC_EVENTS.XtsHardwareEvents.AllMoversValid,'');
 END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getModuleInfoData" Id="{b00af8fa-afc5-4832-90b7-0b785a21c099}">
      <Declaration><![CDATA[METHOD getModuleInfoData : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.Update() THEN
	CurrentLive[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.OverallCurrent;
	MaxCurrent[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.MaxOverallCurrentLast500ms;
	f24V[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.AuxiliaryVoltage24V;
	f48V[nModuleCounter]:=XtsIoEnvironment.XpuTcIo(1).PartTcIo(1).ModuleCoE(nModuleCounter).InfoData.DcLinkVoltage;
	//Increase Module count
	IF nModuleCounter = SystemParameters.nModuleNumber THEN
		nModuleCounter:=1;
	ELSE
		nModuleCounter:=nModuleCounter+1;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverEnvInterface" Id="{41d843cc-1e86-40a6-a335-47af7a169644}">
      <Declaration><![CDATA[METHOD PUBLIC GetMoverEnvInterface : I_TcIoXtsXpuMover
VAR_INPUT
	MoverNumber : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMoverEnvInterface := XtsIoEnvironment.XpuTcIo(1).MoverTcIo(MoverNumber);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getMoversDetected" Id="{f316fb3e-2c49-4310-aa99-6f4cd73010f0}">
      <Declaration><![CDATA[METHOD getMoversDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XtsIoEnvironment.XpuTcIo(1).GetDetectedMoverCount() = XtsIoEnvironment.XpuTcIo(1).GetExpectedMoverCount() THEN
	getMoversDetected := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversDetected,UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetExpectedMoverCount()));
ELSE
	getMoversDetected := FALSE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversNotFound,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverTrackId" Id="{5238a5d7-e3c6-49a8-b781-758176dc2db0}">
      <Declaration><![CDATA[METHOD PUBLIC GetMoverTrackId : OTCID
VAR_INPUT
	moverNumber : INT;
END_VAR
VAR
	posInfo : Tc3_XTS_Utility.ST_PositionInfo;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[posInfo := XtsIoEnvironment.XpuTcIo(1).MoverTcIo(moverNumber).GetPositionInfo();
GetMoverTrackId := posInfo.nTrackObjectid;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInSim" Id="{7079e35e-0b08-4e1a-90dd-d5ff9bd0268d}">
      <Declaration><![CDATA[METHOD IsInSim : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  XtsIoEnvironment.XpuTcIo(1).GetOperationMode() = OperationMode.Simulation THEN
	IsInSim := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.XtsInSimulationMode,'');
ELSE
	IsInSim := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverDetection" Id="{f0df76d0-8fd9-47e2-a4ee-b3636cb67c04}">
      <Declaration><![CDATA[METHOD TriggerMoverDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XtsIoEnvironment.XpuTcIo(1).TriggerRedetection();
Logger.Send(TC_EVENTS.XtsHardwareEvents.MoverDetectionInitiated,'');
TriggerMoverDetection := true;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverID" Id="{f94a4161-104a-471e-b20d-98cf1403fdab}">
      <Declaration><![CDATA[METHOD TriggerMoverID : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mover1 Functionality		
// Check if "MoverIdDetectionMode" has been activated under the XtsProcessingUnit object.
IF XtsIoEnvironment.XpuTcIo(1).GetMoverIdDetectionMode() = E_MoverIdDetectionMode.Mover1
	OR XtsIoEnvironment.XpuTcIo(1).GetMoverIdDetectionMode() = 2 THEN

	// Check if the "MoverIdDetection" has already been started or the Mover1 was found.
	IF NOT (bMoverIdDetectionActive OR bMoverIdDetected) THEN
		// Trigger the "MoverIdDetection".
		XtsIoEnvironment.XpuTcIo(1).TriggerMoverIdDetection();
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionStarted,'');
	END_IF

	// Check for error or success of "MoverIdDetection".
	bMoverIdDetectionError 	:= XtsIoEnvironment.XpuTcIo(1).GetHasMoverIdDetectionError();
	bMoverIdDetected 	:= XtsIoEnvironment.XpuTcIo(1).GetIsMoverIdDetectionValid();
	bMoverIdDetectionActive	:= XtsIoEnvironment.XpuTcIo(1).GetIsMoverIdDetectionActive();
	
	// If the detection has an error, check for errors in output and try again.
	IF bMoverIdDetectionError THEN
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionFailed,'');
		RETURN; 
	END_IF

	// Do not process any further until the "MoverId" was deteced.
	IF NOT bMoverIdDetected THEN
		RETURN;
	END_IF	
	TriggerMoverID := TRUE;	
	Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionComplete,'');
ELSE
	TriggerMoverID := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.StandardMoverNumberingComplete,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsHardware">
      <LineId Id="577" Count="65" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.GetActiveTracks">
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="66" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="1" />
    </LineIds>
    <LineIds Name="XtsHardware.getAllMoversValid">
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getModuleInfoData">
      <LineId Id="6" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.GetMoverEnvInterface">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getMoversDetected">
      <LineId Id="16" Count="5" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.GetMoverTrackId">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.IsInSim">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverDetection">
      <LineId Id="11" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverID">
      <LineId Id="40" Count="8" />
      <LineId Id="73" Count="0" />
      <LineId Id="49" Count="21" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>