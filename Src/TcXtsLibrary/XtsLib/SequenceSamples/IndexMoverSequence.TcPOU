<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="IndexMoverSequence" Id="{4ed28eae-b2a7-40a7-8856-6ea87acd0ba0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK IndexMoverSequence
VAR_INPUT
	ThisMover : IMover;
	XtsTrack : IXtsTrack;
	StateMachine : IPmlStateMachine;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	State : IndexSequenceState;  
	CurrentStation : INT;
	TargetStationPosition : MC_LREAL;
	_MoverVelocity : MC_LREAL := 1000.0;
	stSequenceInfo : MoverSequenceInfo;
END_VAR
VAR_IN_OUT
	StationArray : ARRAY[*] OF IProcess;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
	State := IndexSequenceState.Aborting;
ELSIF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Stopping THEN
	State := IndexSequenceState.Stopping;
END_IF
CASE State OF
	IndexSequenceState.Init:
		IF ThisMover.isDetected() THEN
			State := IndexSequenceState.Available;
		END_IF
		
	IndexSequenceState.Available:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Execute THEN
			State := IndexSequenceState.MovingToStart;
		END_IF
		
	IndexSequenceState.MovingToStart:
		IF ThisMover.isAtPosition(position := XtsTrack.HomePosition) THEN
			State := IndexSequenceState.AtStart;
		END_IF
			
	IndexSequenceState.AtStart:
		IF StationArray[LOWER_BOUND(StationArray,1)].IsReady() THEN
			State := IndexSequenceState.GetNextMove;
		END_IF

	IndexSequenceState.MovingToStation:
		IF ThisMover.isStationary() THEN 
			IF ThisMover.isAtPosition(TargetStationPosition) THEN
				IF StationArray[CurrentStation].IsProcess THEN
					State := IndexSequenceState.AtProcess;
				ELSE
					State := IndexSequenceState.AtStation;
				END_IF
				StationArray[CurrentStation].HasMover(ThisMover);
			ELSE
				State := IndexSequenceState.QueuedAtStation;
			END_IF
		END_IF
		
	IndexSequenceState.QueuedAtStation:
		IF NOT ThisMover.isStationary() THEN
				State := IndexSequenceState.MovingToStation;
		END_IF

	IndexSequenceState.AtStation:
		IF StationArray[CurrentStation].isComplete() THEN
			State := IndexSequenceState.GetNextMove;
		END_IF

	IndexSequenceState.AtProcess:
		ThisMover.MoveTo(Position := StationArray[CurrentStation].EndPosition,
								Velocity := StationArray[CurrentStation].ProcessVelocity,
								BackwardMove := FALSE);
		State := IndexSequenceState.InProcess;
								
	IndexSequenceState.InProcess:
		IF ThisMover.isStationary() THEN 
			IF ThisMover.isAtPosition(StationArray[CurrentStation].EndPosition) THEN
				State := IndexSequenceState.GetNextMove;
			END_IF
		END_IF
	
	IndexSequenceState.GetNextMove:
		IF CurrentStation = UPPER_BOUND(StationArray,1) THEN
			IF ThisMover.MoveTo(Position := XtsTrack.HomePosition,
							Velocity := _MoverVelocity,
							BackwardMove := FALSE) THEN
				State := IndexSequenceState.MovingToStart;
				StationArray[CurrentStation].MoverAway();
				CurrentStation := 0; 
			END_IF
		ELSE
			State := IndexSequenceState.GoToNextStation;
		END_IF
		
	IndexSequenceState.GoToNextStation:
		IF StationArray[CurrentStation + 1].IsProcess THEN
			TargetStationPosition := StationArray[CurrentStation + 1].StartPosition;
		ELSE
			TargetStationPosition := StationArray[CurrentStation + 1].Position;
		END_IF
		IF 	ThisMover.MoveTo(Position := TargetStationPosition,
							Velocity := _MoverVelocity,
							BackwardMove := FALSE) THEN
			IF CurrentStation <> 0 THEN
				StationArray[CurrentStation].MoverAway();	
			END_IF		
			CurrentStation := CurrentStation + 1;
			State := IndexSequenceState.MovingToStation;
		END_IF	

	IndexSequenceState.Stopping:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Stopped THEN
			State := IndexSequenceState.Available;
			CurrentStation := 0;
			TargetStationPosition := 0.0;
		END_IF			
		
	IndexSequenceState.Aborting:
		IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborted THEN
			State := IndexSequenceState.Available;
			CurrentStation := 0;
			TargetStationPosition := 0.0;
		END_IF
END_CASE

//Cyclic update info data
stSequenceInfo.CurrentStation := CurrentStation;
stSequenceInfo.MoverId := ThisMover.AxisRef.NcToPlc.AxisId;
stSequenceInfo.State := State;
stSequenceInfo.Velocity := ThisMover.AxisRef.NcToPlc.ActVelo;]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{397c3846-e217-40d7-9923-29b7d6a40cc1}">
      <Declaration><![CDATA[METHOD Abort : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[State := IndexSequenceState.Available;
CurrentStation := 0;
TargetStationPosition := 0.0;
stSequenceInfo.CurrentStation := CurrentStation;
stSequenceInfo.MoverId := ThisMover.AxisRef.NcToPlc.AxisId;
stSequenceInfo.State := State;
stSequenceInfo.Velocity := ThisMover.AxisRef.NcToPlc.ActVelo;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverVelocity" Id="{c303dc01-7139-45a4-8651-17c52d290c79}">
      <Declaration><![CDATA[PROPERTY MoverVelocity : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{25572cf6-6ba9-4a2c-b7d5-aa1f6ca55ed0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverVelocity := _MoverVelocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9398706a-cb62-4c73-8150-7069a2b23126}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MoverVelocity := MoverVelocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="IndexMoverSequence">
      <LineId Id="1128" Count="110" />
      <LineId Id="1006" Count="0" />
    </LineIds>
    <LineIds Name="IndexMoverSequence.Abort">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="IndexMoverSequence.MoverVelocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="IndexMoverSequence.MoverVelocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>