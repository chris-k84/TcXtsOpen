<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XtsDisableSequence" Id="{73e2f204-8f47-4c35-9b5f-a5e50b2f6f82}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsDisableSequence EXTENDS TaskBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_collisionGroup : ICollisionGroup;
	removeAllAxes : RemoveAllMoverFromGroup(_collisionGroup);
	grpStop : StopMoverGroup(_collisionGroup);
	DisableTrigger: BOOL;
	moverNumbers : DINT := 1;
	AllMoversDisabled: BOOL;	
	Logger : TcMessage_Ext;
	arrMovers : ARRAY[1..SystemParameters.NumberOfMovers] OF IMover;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{afd537cd-f397-4f71-a0b8-6dd2d52942e4}">
      <Declaration><![CDATA[METHOD Abort : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisableTrigger := FALSE;
State := 0;
removeAllAxes.Abort();
grpStop.Abort();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{49fe5789-4b11-44af-800d-5154ebe10a5b}">
      <Declaration><![CDATA[PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{d9b135a6-50eb-4c78-9a64-ff3d885ce4e0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := _busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cycle" Id="{d518ce14-c393-42a2-a73f-ad54a355501b}">
      <Declaration><![CDATA[METHOD Cycle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	0:
		IF DisableTrigger THEN
			DisableTrigger := FALSE;
			_busy := TRUE;
			_done := FALSE;
			_Error := FALSE;
			IF _collisionGroup.GroupState = CAGroupStatus.mcGroupStateMoving THEN
				Logger.Send(TC_EVENTS.XtsCAGroupEvents.CAGroupStop,'');
				grpStop.Execute();
				State := 10;
			ELSE
				State := 20;
				removeAllAxes.RemoveAllMover();
				Logger.Send(TC_EVENTS.XtsCAGroupEvents.CaGroupRemoveMovers,'');
			END_IF
		END_IF
		
	10:
		IF grpStop.Done THEN
			State := 20;
			Logger.Send(TC_EVENTS.XtsCAGroupEvents.CaGroupRemoveMovers,'');
			removeAllAxes.RemoveAllMover();
		END_IF
	
	20:
		IF removeAllAxes.Done THEN
			FOR moverNumbers := 1 TO SystemParameters.NumberOfMovers DO
				arrMovers[moverNumbers].IdentInGroup := 0;
				arrMovers[moverNumbers].DisableAxis();
			END_FOR
			State := 30;
		END_IF
		
	30:
		AllMoversDisabled := TRUE;
		FOR moverNumbers := 1 TO SystemParameters.NumberOfMovers DO
			AllMoversDisabled := TRUE AND NOT arrMovers[moverNumbers].isEnabled();
		END_FOR
		IF AllMoversDisabled THEN
			logger.Send(TC_EVENTS.XtsCAGroupEvents.AllMoversDisabled,'');
			State := 40;
			_collisionGroup.Disable();
			logger.Send(TC_EVENTS.XtsCAGroupEvents.CAGroupDisable,'');
		END_IF
	40:
		IF _collisionGroup.GroupState = CAGroupStatus.mcGroupStateErrorStop THEN
			_collisionGroup.Reset();
			Logger.Send(TC_EVENTS.XtsCAGroupEvents.CAGroupReset,'');
		END_IF	
		State := 50;
		
	50:
		IF _collisionGroup.GroupState = 1 THEN
			State := 0;
			grpStop.Deceleration := Tc3_Mc3Definitions.MC_DEFAULT;
			grpStop.Jerk := Tc3_Mc3Definitions.MC_DEFAULT;
			
			_busy := FALSE;
			_done := true;
		END_IF
END_CASE

removeAllAxes.Cycle();
grpStop.Cycle();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{d8277baf-d0a5-4ca3-b9d2-183e530222af}">
      <Declaration><![CDATA[METHOD Disable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisableTrigger := true;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Done" Id="{6d0d2c15-56db-4be8-8424-371b8c955734}">
      <Declaration><![CDATA[PROPERTY Done : BOOL]]></Declaration>
      <Get Name="Get" Id="{88438249-a532-4834-98f5-5b1ca5ace883}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := _done;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{b5107e86-b57f-4fd1-ad51-ec11273baaeb}">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{3dbf2590-f04b-4153-995e-8c63a74a9148}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := _Error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{2df29c4c-50b6-4b7a-96ef-c07bbbce5982}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	collisionGroup : ICollisionGroup;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_collisionGroup := collisionGroup;
removeAllAxes.FB_init(FALSE, FALSE, CAGroup := collisionGroup);
grpStop.FB_init(FALSE,FALSE,CAGroup := collisionGroup);]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverArray" Id="{f8fae4bb-3ed3-4903-b59c-556c44d0cb58}">
      <Declaration><![CDATA[PROPERTY MoverArray : array[1..SystemParameters.NumberOfMovers] of IMover]]></Declaration>
      <Get Name="Get" Id="{0aa5b8e6-ce65-4616-8c01-abdde06fe5bd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverArray := arrMovers;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{35b58e7e-68bb-485c-87c1-f4e5b4d76a5d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[arrMovers := MoverArray;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SetEmergencyDynamics" Id="{62e6980a-ad39-4f6d-bfa3-13e514d9c054}">
      <Declaration><![CDATA[METHOD SetEmergencyDynamics : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[grpStop.Deceleration := Tc3_Mc3Definitions.MC_MAXIMUM;
grpStop.Jerk := Tc3_Mc3Definitions.MC_MAXIMUM;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsDisableSequence">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Abort">
      <LineId Id="3" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Busy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Cycle">
      <LineId Id="6" Count="63" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Disable">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Done.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.FB_init">
      <LineId Id="3" Count="0" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.MoverArray.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.MoverArray.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsDisableSequence.SetEmergencyDynamics">
      <LineId Id="3" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>