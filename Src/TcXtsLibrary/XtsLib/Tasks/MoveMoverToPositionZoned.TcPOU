<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MoveMoverToPositionZoned" Id="{8bf14309-c05e-4e32-a9cf-c640451f85c6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC MoveMoverToPositionZoned EXTENDS MoveMoverToPosition
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	StartZone: INT;
	CurrentZone : INT;
	ZoneTransitionPositions : ARRAY[1..4] OF DINT;
	ZoneVelocities : ARRAY[1..4] OF MC_LREAL;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{57638fef-db61-49e6-a9a0-eb650085d553}">
      <Declaration><![CDATA[METHOD Cycle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	0:
		IF _MoveMover THEN
			_done := FALSE;
			_error := FALSE;
			_busy := TRUE;
			moveAbs.Execute := TRUE;
			StartZone := GetZone();
			moveAbs.Velocity := ZoneVelocities[StartZone];
			IF moveAbs.Busy THEN
				State := 10;
				_MoveMover := FALSE;
			END_IF
		END_IF
	
	10:
		IF NOT moveAbs.Busy THEN
			IF moveAbs.Done THEN
				_done := TRUE;
			ELSIF moveAbs.Error THEN
				_error := TRUE;
			END_IF
			_busy := FALSE;
			moveAbs.Execute := FALSE;
			State := 0;
		ELSE
			CurrentZone := GetZone();
			IF CurrentZone <> StartZone THEN
				moveAbs.Execute := FALSE;
				State := 0;
				_MoveMover := TRUE;
			END_IF
		END_IF
END_CASE

moveAbs(Axis := _axis);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{6ee86efb-83b0-4bbc-9b17-a763f7f90ce4}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	axis : REFERENCE TO AXIS_REF;
	arrPositions : ARRAY[1..4] OF DINT;
	arrVelos : ARRAY[1..4] OF MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^();
ZoneTransitionPositions := arrPositions;
ZoneVelocities := arrVelos;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetZone" Id="{50824bdc-8788-4c2d-b3ea-cd5268c03d38}">
      <Declaration><![CDATA[METHOD GetZone : int
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _axis.NcToPlc.ModuloActPos > ZoneTransitionPositions[1] AND _axis.NcToPlc.ModuloActPos < ZoneTransitionPositions[2] THEN
	GetZone := 1;
ELSIF (_axis.NcToPlc.ModuloActPos > ZoneTransitionPositions[2] AND _axis.NcToPlc.ModuloActPos < 11000.0) 
		OR _axis.NcToPlc.ModuloActPos > 0.0 AND  _axis.NcToPlc.ModuloActPos < ZoneTransitionPositions[3] THEN
	GetZone := 2;
ELSIF _axis.NcToPlc.ModuloActPos > ZoneTransitionPositions[3] AND _axis.NcToPlc.ModuloActPos < ZoneTransitionPositions[4] THEN
	GetZone := 3;
ELSIF _axis.NcToPlc.ModuloActPos > ZoneTransitionPositions[4] THEN
	GetZone := 4;
ELSE
	GetZone := 4;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MoveMoverToPositionZoned">
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="MoveMoverToPositionZoned.Cycle">
      <LineId Id="6" Count="34" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MoveMoverToPositionZoned.FB_init">
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="1" />
    </LineIds>
    <LineIds Name="MoveMoverToPositionZoned.GetZone">
      <LineId Id="50" Count="10" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>