<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="XtsMoverTestSuite" Id="{d5190c30-b415-4dc1-98ad-8c09263a2d99}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsMoverTestSuite EXTENDS XtsMoverAxis
VAR
	fbTestSuite : FB_Testsuite;
	xtsTrack : XtsTrackStub;
	iXtsTrackStub : I_XtsTrack := xtsTrack;
	GearMasterFake : AXIS_REF;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbTestSuite();

CASE fbTestSuite.P_Testcase OF
	E_Testcase.Start:
		THIS^._MyNCData.AxisId := 1;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.Cycle(), 'Cycle method did not return a complete');
		fbTestSuite.M_Testcase('GivenTheMoverIsFoundWhenCycleCalledThenCyclicTaskShouldRun',T#1S,'','',1);
		
	1:
		THIS^._MyNCData.AxisId := 0;
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.Cycle(), 'Cycle method ran without vaild NC connection');
		fbTestSuite.M_Testcase('GivenNoNCWhenCycleCalledThenCyclicShouldNotRun',T#1S,'','',2);	
		
	2:
		THIS^._CurrentTrack := 1; 
		_MyAxisStatus.Disabled := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.EnableMover(), 'Enable command failed when mover disabled');
		fbTestSuite.M_Testcase('GivenMoverDisabledWhenEnableCommandThenMoverEnables',T#1S,'','',3);
		
	3:
		_MyAxisStatus.Disabled := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.EnableMover(), 'Enable Command was accepted when enabled');
		fbTestSuite.M_Testcase('GivenMoverEnabledWhenEnableComandThenEnableRejected',T#1S,'','',4);
		
	4:
		_MyAxisStatus.Disabled := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.DisableMover(), 'Disable command failed when mover was enabled');
		fbTestSuite.M_Testcase('GivenMoverEnabledWhenDisabledCommandMadeThenMoverDisables',T#1S,'','',5);
		
	5:	
		_MyAxisStatus.Disabled := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.DisableMover(), 'Disable command accepted when mover was disabled');
		fbTestSuite.M_Testcase('GivenMoverDisabledWhenDisabledCommandMadeThenDisableRejected',T#1S,'','',6);
		
	6:
		_ActiveTrackLength := 5000.0;
		THIS^.Gap := 100.0;
		fbTestSuite.P_Assert.M_Equals_DINT(1,THIS^.MoveTo(RequiredPosition := 1000.0, MoveVelocity := 1000.0), 'Move command was rejected when mover was ready');
		fbTestSuite.M_Testcase('GivenMoverReadyWhenMoveCommandMadeThenMoverShouldAcceptMove',T#1S,'','',7);
		
	7:
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.MoveTo(RequiredPosition := 1000.0, MoveVelocity := 5000.0), 'Move command was accepted when velocity too high');
		fbTestSuite.M_Testcase('WhenMoveCommandVelocityTooHighThenMoverShouldRejectMove',T#1S,'','',8);
		
	8: 
		_ActiveTrackLength := 1500.0;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.MoveTo(RequiredPosition := 2000.0, MoveVelocity := 1000.0), 'Move command was accepted when position outside modulo');
		fbTestSuite.M_Testcase('WhenMoveCommandOutsideModuloThenMoverShouldRejectMove',T#1S,'','',9);
		
	9:
		THIS^._MyAxisStatus.NotMoving := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(1,THIS^.HaltAxis(),'Mover halt was rejected when mover moving');
		fbTestSuite.M_Testcase('GivenMovingMoverWhenHaltCommandThenMoverShouldAcceptHalt',T#1S,'','',10);
		
	10:
		THIS^._MyAxisStatus.NotMoving := FALSE;
		THIS^.HaltAxis();
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.HaltAxis(), 'Mover halt was accepted when halt already commanded');
		fbTestSuite.M_Testcase('GivenHaltingMoverWhenHaltCommandGivenThenMoverShouldRejectCommand',T#1S,'','',11);
	
	11:
		THIS^.MoverHaltCommand.Abort();
		THIS^._MyAxisStatus.NotMoving := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.HaltAxis(), 'Mover halt was accepted when velo was zero');
		fbTestSuite.M_Testcase('GivenStationaryMoverWhenHaltCommandedThenMoverShourlRejectCommand',T#1S,'','',12);
	
	12:
		THIS^.MoverResetCommand.Abort();
		THIS^._MyAxisStatus.Error := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(1,THIS^.ResetAxis(), 'Mover reset was rejected when mover in error');
		fbTestSuite.M_Testcase('GivenMoverErrorWhenResetCommandedThemMoverShouldAcceptReset',T#1S,'','',13);
		
	13:
		THIS^._MyAxisStatus.Error := TRUE;
		THIS^.ResetAxis();
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.ResetAxis(), 'Mover reset was accepted when reset already commanded');
		fbTestSuite.M_Testcase('GivenResettingMoverWhenResetCommandedThenMoverShouldRejectCommand',T#1S,'','',14);
		
	14:
		THIS^.MoverResetCommand.Abort();
		THIS^._MyAxisStatus.Error := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.ResetAxis(), 'Mover reset was accepted when no error');
		fbTestSuite.M_Testcase('GivenOKMoverWhenResetCommandedThenMoverShouldRejectCommand',T#1S,'','',15);
		
	15:
		_MyAxisStatus.NotMoving := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.ActivateTrack(newTrack := 16#1,iXtsTrackStub), 'Mover rejected valid active track command');
		fbTestSuite.M_Testcase('GivenAStationaryMoverWhenActiveTrackGivenThenMoverShouldAcceptNewTrack',T#1S,'','',16);
		
	16:
		THIS^.MoverActivateTrackCommand.Abort();
		_MyAxisStatus.NotMoving := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.ActivateTrack(newTrack := 16#1,iXtsTrackStub), 'Mover accepted track command when moving');
		fbTestSuite.M_Testcase('GivenMovingMoverWhenActiveTrackCommandThenMoverSouldRejectCommand',T#1S,'','',17);
		
	17:
		THIS^.MoverActivateTrackCommand.Abort();
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.ActivateTrack(newTrack := 16#1,iXtsTrackStub), 'Mover Accepted invalid track');
		fbTestSuite.M_Testcase('GivenInvalidTrackWhenActiveTrackCommandThenMoverShouldReject',T#1S,'','',18);
		
	18:
		THIS^._CurrentTrack := 0; 
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.EnableMover(), 'Mover accepted enable without a valid track');
		fbTestSuite.M_Testcase('GivenNoTracksRegisteredWhenEnebleGivenThenMoverShouldReject',T#1S,'','',19);
		
	19: 
		THIS^.MoverActivateTrackCommand.Abort();
		_MyAxisStatus.NotMoving := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.ActivateTrack(NewTrack := 1, Track := iXtsTrackStub), 'Mover did not set the track length when given new track');
		fbTestSuite.M_Testcase('GivenNewTrackWhenActivateTrackCalledThenMoverShouldAcceptNewTrackLength',T#1S,'','',20);
		
	20:
		THIS^.MyMasterRef REF= 0;
		_ActiveTrackLength := 2500.0;
		THIS^.axesGear.Abort();
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.Gear(1000.0,2000.0), 'Mover accepted command with no valid master');
		fbTestSuite.M_Testcase('GivenNoMasterWhenGearCommandThenMoverShouldReject',T#1S,'','',21);
		
	21:
		THIS^.axesGear.Abort();
		THIS^.MyMasterRef REF= GearMasterFake;
		_ActiveTrackLength := 2500.0;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.Gear(1000.0,2000.0), 'The Mover rejected valid gear command');
		fbTestSuite.M_Testcase('GivenAValidMoverWhenGearCommandIssuedThenMoverShouldAcceptCommand',T#1S,'','',22);
		
	22:
		THIS^.MyMasterRef REF= GearMasterFake;
		THIS^.axesGear.Abort();
		_ActiveTrackLength := 4000.0;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.Gear(5000.0,1000.0), 'Mover accepted master position outside track');
		fbTestSuite.M_Testcase('GivenAValidMoverWhenGearCommandOutsideTrackThenMoverShouldReject',T#1S,'','',23);
		
	23:
		THIS^.MyMasterRef REF= GearMasterFake;
		THIS^.axesGear.Abort();
		_ActiveTrackLength := 5000.0;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.Gear(2000.0,10000.0), 'Mover accepted slave position outside track');
		fbTestSuite.M_Testcase('GivenAValidMoverWhenGearCommandOutsideTrackThenMoverShouldReject',T#1S,'','',E_Testcase.Done);
		
	E_Testcase.Done:;	 
END_CASE
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{cc5fd3b5-727d-4fcb-8ac0-acb7eb8ec3f3}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	XtsRunner : I_ObjectRunner;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//// Add Testsuite to Testsuites
TestSuiteGVL.fbTestsuites.M_Add(fbTestsuite);
TestSuiteGVL.fbTestsuites.P_Options.sFilePathName:= 'C:\test\report.xml';]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsMoverTestSuite">
      <LineId Id="1" Count="141" />
    </LineIds>
    <LineIds Name="XtsMoverTestSuite.FB_init">
      <LineId Id="1" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>