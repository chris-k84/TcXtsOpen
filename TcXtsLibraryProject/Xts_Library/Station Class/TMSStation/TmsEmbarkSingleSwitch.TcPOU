<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="TmsEmbarkSingleSwitch" Id="{a1345a8f-d28a-4176-804e-11454f70b667}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TmsEmbarkSingleSwitch EXTENDS Station IMPLEMENTS ITF_SwitchStation
VAR
	DepartMover : I_XtsMoverAxis;
	_StateMachine : IPmlStateMachine;
	SwitchAxis : MC2_Axis_Base;
	_switchUpperPosition : MC_LREAL;
	_switchLowerPosition : MC_LREAL;
	State :(
		Init,                                               
		Ready,                                 
        Waiting,
		HasSwitch,
		Call,
		FindTarget,
		Boarding,
		BoardingComplete,
		ActivateTrackForMover,
		Moving,
		Done,
		Aborting); 
	_switchPosition: MC_LREAL;
	arrTrackIds : ARRAY[1..SystemParameters.NumberOfTracks] OF OTCID;
	_BoardVelocity : MC_LREAL;
	_SwitchVelocity : MC_LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="BoardVelocity" Id="{831e3c6b-034b-4353-83d0-e3165e0635f3}">
      <Declaration><![CDATA[PROPERTY BoardVelocity : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{29602b3a-b998-4746-b889-c90549b64635}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BoardVelocity := _BoardVelocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2fe6cf87-3d91-4f0d-abae-291448af5dcf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_BoardVelocity := BoardVelocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Cycle" Id="{992aa554-6501-4e8f-af38-b1f2b991a987}">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR
	ActivateTrackResult : BOOL;
	BoardMoverResult : HRESULT;
	BaseCallResult : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Cycle := S_OK;
CASE State OF
	Init:
		_Operating := _Empty := _Complete := _Ready := _HasMover := FALSE;
		StationMovers := 0;
		State := Ready;
	
	Ready:	
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Clearing THEN
			_Operating := _Complete := _HasMover := FALSE;
			_Empty := _Ready := TRUE;
			StationMovers := 0;
			State := Waiting;
		END_IF
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF
	
	Waiting:
		IF _HasMover THEN
			State := HasSwitch;
			_Operating := TRUE;
			_Empty := FALSE;
			_Ready := FALSE;
			_Complete := FALSE;
		END_IF
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF
	
	HasSwitch:
		
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF	
		
	Call:
		
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF
			
	Boarding:
		BoardMoverResult := DepartMover.MoveTo(RequiredPosition := _switchPosition, MoveVelocity := _BoardVelocity);
		IF DepartMover.isMoverAtPosition(position := _switchPosition) THEN
			State := BoardingComplete;
		END_IF
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF
		
	BoardingComplete:

		State := BoardingComplete;
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF
		
	Moving:

		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF
		
	ActivateTrackForMover:

		State := Moving;
		_Complete := TRUE;
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF
			
	Done:
		IF _Complete AND NOT _HasMover THEN
			_Operating := FALSE;
			_Empty := TRUE;
			_Ready := TRUE;
			State := Waiting;
		END_IF
		IF _StateMachine.GetCurrentState() = E_PMLState.ePMLState_Aborting THEN
			State := Aborting;
		END_IF	

	Aborting:
		State := Ready;	
		DepartMover := 0;
	ELSE
		Cycle := E_FAIL;
END_CASE
BaseCallResult := SUPER^.Cycle();
SwitchAxis.Cycle();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasMover" Id="{3dfbfe5d-88fb-42cd-8ef4-33bfd88b9fd1}">
      <Declaration><![CDATA[METHOD HasMover : BOOL
VAR_INPUT
	mover : I_XtsMoverAxis;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF StationMovers <= 2 THEN
	StationMovers := StationMovers + 1;
	DepartMover := mover;
	_HasMover := TRUE;
END_IF
HasMover := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAway" Id="{e0f828f0-4af6-4c6b-903d-ca5a359a945a}">
      <Declaration><![CDATA[METHOD PUBLIC MoverAway : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StationMovers := StationMovers - 1;
IF StationMovers = 0 THEN
	_HasMover := FALSE;
END_IF
DepartMover := 0;
MoverAway := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="SwitchLowerPosition" Id="{8a954b15-9e2e-45e2-9983-586f0bb0d4ea}">
      <Declaration><![CDATA[PROPERTY SwitchLowerPosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{c7c8f444-a876-46f4-b0cb-0dad5a2a0e8f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SwitchLowerPosition := _switchLowerPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{53f3e315-b71d-472a-98ca-6f0d73523ae9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_switchLowerPosition := SwitchLowerPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SwitchMoveComplete" Id="{5e3f9db3-9a4d-4699-9458-649b47840420}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD SwitchMoveComplete : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="SwitchUpperPosition" Id="{6faedafb-b954-46db-8550-5042a177e286}">
      <Declaration><![CDATA[PROPERTY SwitchUpperPosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{8d3d0655-9fc3-4248-beaa-e60d661cc7f6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SwitchUpperPosition := _switchUpperPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{da277918-2a30-4cfc-8615-b9ef5ee09b08}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_switchUpperPosition := SwitchUpperPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TrackIds" Id="{60f84ea8-30a8-4877-b5ee-78b5070ad98e}">
      <Declaration><![CDATA[PROPERTY TrackIds : ARRAY[0..1] of OTCID]]></Declaration>
      <Get Name="Get" Id="{cbe6c8be-4cbe-4755-ac3d-aca3acacdfc2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TrackIds := arrTrackIds;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1aa8ea54-81af-46d8-bdb2-7bd4b3a74fb9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[arrTrackIds := TrackIds;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>