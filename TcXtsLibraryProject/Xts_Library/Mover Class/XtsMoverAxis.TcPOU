<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XtsMoverAxis" Id="{f9a43ed2-0578-4aed-857c-1a3adef0c7f6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsMoverAxis EXTENDS CyclicBase
VAR
	MyAxisRef : AXIS_REF;
	_MyAxisStatus : ST_AxisStatus;
	_MyNCData : NCTOPLC_AXIS_REF;
	MoverPowerCommand : AxisPower(MyAxisRef);
	MoverMoveCommand : MoveModuloMoverToPosition(MyAxisRef) := (Gap := 100.0);
	MoverHaltCommand : HaltMover(MyAxisRef);
	MoverResetCommand : AxesReset(MyAxisRef);
	MoverActivateTrackCommand : ActivateTrackForMover(MyAxisRef);
	_ipTcIoXtsMover	: I_TcIoXtsXpuMover;
	_ActiveTrackLength : MC_LREAL;
	TrackChangeTrigger : R_TRIG;
	_MoverAbsMoveOptions : ST_MoveAbsoluteCAOptions;
	_stTmsActPositions			: ST_PositionInfo;
	_CurrentTrack : I_XtsTrack;
END_VAR
VAR CONSTANT
	_MaxMoverVelocity : MC_LREAL := 4000.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Administration" Id="{660864df-8996-42d7-8e95-bfca1c90696e}" />
    <Folder Name="Commands" Id="{db0a893b-cc1a-482e-a432-7e9d568c5112}" />
    <Folder Name="Dynamics" Id="{6b49cc7a-c913-475a-9f9a-db91d65d07e1}" />
    <Folder Name="ICyclic" Id="{895ad701-1670-4c6d-921e-cd7ccab0c12a}" />
    <Folder Name="Status" Id="{b27ba391-8a3b-4e51-ae24-bae43a7b6e5f}" />
    <Property Name="Acceleration" Id="{5cd04126-8ceb-4f9d-a4c5-c87e7e11d0e6}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Acceleration : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{89c9e6d0-5dfa-4531-97de-32e16eb2e196}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Acceleration := MoverMoveCommand.Acceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{95cc2e62-d911-4757-83d0-b9b38a36fdde}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverMoveCommand.Acceleration := Acceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ActivateTrack" Id="{f7604675-5338-4e11-9132-b17d5df72cc8}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD ActivateTrack : HRESULT
VAR_INPUT
	NewTrack : OTCID;
	Track : I_XtsTrack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT MoverActivateTrackCommand.Busy AND THIS^.isMoverStationary() AND NewTrack <> 0  THEN
	IF MoverActivateTrackCommand.Execute(Track := NewTrack) THEN
		ResetAxis := 1;
	ELSE
		ResetAxis := -1;
	END_IF
ELSE
	ResetAxis := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{b5956233-12ba-4cb8-805f-5693aec42bed}" FolderPath="ICyclic\">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF isMoverDetected() THEN
	MyAxisRef.ReadStatus();
	_MyAxisStatus := MyAxisRef.Status;
	_MyNCData := MyAxisRef.NcToPlc;
	MoverPowerCommand.Cycle();
	MoverMoveCommand.Cycle();
	MoverHaltCommand.Cycle();
	MoverResetCommand.Cycle();
	MoverActivateTrackCommand.Cycle();
	TrackChangeTrigger(CLK := MoverActivateTrackCommand.Done);
	IF TrackChangeTrigger.Q THEN
		_MoverAbsMoveOptions.PositionReferenceSystem :=  MoverActivateTrackCommand.NewTrackId;
		MoverMoveCommand.Options := _MoverAbsMoveOptions;	
	END_IF
	IF _ipTcIoXtsMover <> 0 THEN
		_stTmsActPositions := _ipTcIoXtsMover.GetPositionInfo();
	END_IF
	Cycle := 1;
ELSE
	Cycle := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Deceleration" Id="{3def2bbc-f7ec-4120-acb9-2ff2a2789bd5}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Deceleration : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{e6097884-8279-4e20-92f9-6fb8b5120af4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Deceleration := MoverMoveCommand.Deceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{dbf3cf03-c8db-40c9-ab3e-669bb5cdced1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverMoveCommand.Deceleration := MoverHaltCommand.Deceleration := Deceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="DisableMover" Id="{a82f95fa-77b4-4c5e-ae67-686dbd3b2d8d}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC DisableMover : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.isMoverEnabled() AND NOT MoverPowerCommand.Busy THEN
	MoverPowerCommand.Disable();
	DisableMover := 1;
ELSE
	DisableMover := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableMover" Id="{d130fe63-f34a-4455-8bb8-4dfcc482e573}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC EnableMover : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT MoverPowerCommand.Busy) AND NOT THIS^.isMoverEnabled() THEN
	MoverPowerCommand.Enable();
	EnableMover := 1;
ELSE
	EnableMover := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{b6181511-263e-44ed-9731-4c0d1e2c2029}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	XtsRunner : I_ObjectRunner;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XtsRunner.AddComponent(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Gap" Id="{dd72da9d-fc94-421a-8ee7-a84a721dd20c}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Gap : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{5c8fd02d-70e7-4f46-b386-6000a46a3487}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Gap := MoverMoveCommand.Gap;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{280f9258-e1cd-43be-bf57-16929cbbc8d6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Gap >= 50.0 THEN
	MoverMoveCommand.Gap := MoverHaltCommand.Gap := Gap;
ELSE
	Gap := 100.0;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="HaltAxis" Id="{b177db81-8e99-498a-a7a2-cd0938dd7a2c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC HaltAxis : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT MoverHaltCommand.Busy AND NOT THIS^.isMoverStationary() THEN
	IF MoverHaltCommand.Execute() THEN
		HaltAxis := 1;
	ELSE
		HaltAxis := -1;
	END_IF
ELSE
	HaltAxis := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IdentInGroup" Id="{4d5563a0-634a-4074-a0e4-612875dd790c}" FolderPath="Administration\">
      <Declaration><![CDATA[PROPERTY PUBLIC IdentInGroup : IDENT_IN_GROUP_REF]]></Declaration>
      <Get Name="Get" Id="{6419a53d-e416-464a-881c-e300db0a9add}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IdentInGroup := UDINT_TO_IDENTINGROUP(id := _MyNCData.AxisId);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="isMoverAtPosition" Id="{f1a74560-cd92-4fa6-83a2-3bacea608337}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverAtPosition : BOOL
VAR_INPUT
	Position : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Position > 1 THEN
	IF _stTmsActPositions.fTrackPosition < position + 1 AND _stTmsActPositions.fTrackPosition > position - 1 THEN
		isMoverAtPosition := TRUE;
	ELSE
		isMoverAtPosition := FALSE;
	END_IF  
ELSE
	IF _stTmsActPositions.fTrackPosition < position + 1 AND _stTmsActPositions.fTrackPosition > 0.0  
		OR _stTmsActPositions.fTrackPosition < _CurrentTrack.TrackLength AND _stTmsActPositions.fTrackPosition > _CurrentTrack.TrackLength - 1 THEN
		isMoverAtPosition := TRUE;
	ELSE
		isMoverAtPosition := FALSE;
	END_IF
END_IF
_ipTcIoXtsMover.GetActiveTrackObjectId()

]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMoverDetected" Id="{c1a5811f-71c0-458a-bf03-7bfa946db86b}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isMoverDetected := _MyNCData.AxisId <> 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMoverEnabled" Id="{7f5530a3-9bf6-4669-8c7b-76814da68801}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverEnabled : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isMoverEnabled :=  NOT _MyAxisStatus.Disabled;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMoverStationary" Id="{64b09804-b6c0-46e5-9180-be650a88cf77}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverStationary : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isMoverStationary := _MyAxisStatus.NotMoving;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Jerk" Id="{fbc5f504-aa6b-48f8-8a62-bbde3b74b20e}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Jerk : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{98c0c9db-aae6-4788-a223-2bf5fa007418}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Jerk := MoverMoveCommand.Jerk;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6a6a16a3-4f19-4f4d-bd8d-8441ae3b5cf2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverMoveCommand.Jerk := MoverHaltCommand.Jerk := Jerk;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverErrorID" Id="{9a24b894-1b02-4293-95b1-831b38fd5fad}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY PUBLIC MoverErrorID : DWORD]]></Declaration>
      <Get Name="Get" Id="{01f9b7c9-0e41-48f0-a5f9-8a7a495677b0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverErrorID := _MyAxisStatus.ErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoversActiveTrack" Id="{15471ba0-8341-48c7-a2d0-01ca6286078a}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY PUBLIC MoversActiveTrack : OTCID]]></Declaration>
      <Get Name="Get" Id="{2721855b-e1d8-4f74-a352-28794ee4ae69}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoversActiveTrack := _ipTcIoXtsMover.GetActiveTrackObjectId();]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoverXtsIoEnvInterface" Id="{6aaf98f4-e1bc-4f35-afbe-48664404e767}" FolderPath="Administration\">
      <Declaration><![CDATA[PROPERTY PUBLIC MoverXtsIoEnvInterface : I_TcIoXtsXpuMover]]></Declaration>
      <Get Name="Get" Id="{5b75808a-7c24-4c09-8809-4a555d5acdb1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverXtsIoEnvInterface := _ipTcIoXtsMover;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{57119448-dfbf-405e-ade1-72aad5224720}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ipTcIoXtsMover := MoverXtsIoEnvInterface;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoveTo" Id="{ea6488b0-fefd-4f9f-a3b2-cfd8c6f64d05}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC MoveTo : HRESULT
VAR_INPUT
	RequiredPosition : MC_LREAL;
	MoveVelocity : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT MoverMoveCommand.Busy AND MoveVelocity < _MaxMoverVelocity AND RequiredPosition < _ActiveTrackLength AND Gap >= 50.0 THEN
	IF THIS^.MoverMoveCommand.MoveTo(Position := RequiredPosition, 
									Velocity := MoveVelocity, 
									Direction := Tc3_Mc3Definitions.MC_DIRECTION.mcDirectionPositive, 
									Turns := 0) THEN
									
		MoveTo := 1;
	END_IF
ELSE
	MoveTo := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAxis" Id="{e9d8249c-2f88-4980-a483-ceda82c7ab80}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC ResetAxis : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT MoverResetCommand.Busy AND _MyAxisStatus.Error THEN
	IF MoverResetCommand.Execute() THEN
		ResetAxis := 1;
	ELSE
		ResetAxis := -1;
	END_IF
ELSE
	ResetAxis := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsMoverAxis">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Acceleration.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Acceleration.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.ActivateTrack">
      <LineId Id="10" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Cycle">
      <LineId Id="25" Count="0" />
      <LineId Id="28" Count="5" />
      <LineId Id="26" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="34" Count="2" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Deceleration.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Deceleration.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.DisableMover">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="2" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.EnableMover">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Gap.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Gap.Set">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.HaltAxis">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.IdentInGroup.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.isMoverAtPosition">
      <LineId Id="10" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.isMoverDetected">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.isMoverEnabled">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.isMoverStationary">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Jerk.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.Jerk.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.MoverErrorID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.MoversActiveTrack.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.MoverXtsIoEnvInterface.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.MoverXtsIoEnvInterface.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.MoveTo">
      <LineId Id="12" Count="1" />
      <LineId Id="21" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverAxis.ResetAxis">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>