<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="DisableGroup" Id="{e309beac-a8f6-4753-8ed9-d8f37883f7b3}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}
FUNCTION_BLOCK DisableGroup EXTENDS TaskBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	groupDisable			: MC_GroupDisable;
	_caGroup			: ICollisionGroup;
	_disableGroup : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{471c738d-2cd1-4d5e-b4b6-abdacd440e10}">
      <Declaration><![CDATA[METHOD Abort : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[State := 0;
groupDisable.Execute := FALSE;
Abort := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{8091e283-75fa-4fa7-b8ef-612c591a9cfd}">
      <Declaration><![CDATA[METHOD Cycle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Cycle := S_OK;
CASE State OF
	0:
		IF _disableGroup THEN
			Cycle := S_PENDING;
			_Done := FALSE;
			_Error := FALSE;
			_Busy := TRUE;
			groupDisable.Execute := TRUE;
			IF groupDisable.Busy THEN
				_disableGroup := FALSE;
				State := 10;
				Logger.Send(TC_EVENTS.XtsCaGroupEvents.CAGroupDisabling,'');
			END_IF
		END_IF
	
	10:
		IF NOT groupDisable.Busy THEN
			IF groupDisable.Done THEN
				_Done := TRUE;
				Logger.Send(TC_EVENTS.XtsCaGroupEvents.CAGroupDisabled,'');
			ELSIF groupDisable.Error THEN
				_Error := TRUE;
				Logger.Send(TC_EVENTS.XtsCaGroupEvents.CAGroupDisableError,'');
			END_IF
			_Busy := FALSE;
			groupDisable.Execute := false;
			State := 0;
			Cycle := S_OK;
		END_IF
	ELSE
		Cycle := E_FAIL;
END_CASE


groupDisable(AxesGroup := _caGroup.GroupRef);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{957a3466-1261-44df-92f7-84f5463a1c53}">
      <Declaration><![CDATA[METHOD Execute : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execute := _disableGroup := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{70ba3340-3f18-404c-b96e-e566669fbf07}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	MyCaGroup : ICollisionGroup;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_caGroup := MyCaGroup;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="DisableGroup">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="DisableGroup.Abort">
      <LineId Id="4" Count="2" />
    </LineIds>
    <LineIds Name="DisableGroup.Cycle">
      <LineId Id="44" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="9" Count="22" />
      <LineId Id="40" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="33" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="DisableGroup.Execute">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="DisableGroup.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>