<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XtsEnableSequence" Id="{b7e7ab09-3a30-4ddb-a242-e0b5aa00cbc9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsEnableSequence EXTENDS TaskBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_collisionGroup : ICollisionGroup;
	addMover : AddMoverToGroupTask(_collisionGroup);
	moverNumbers : UINT;
	AllMoversEnabled: BOOL;
	EnableTrigger : BOOL;	
	Logger : TcMessage_Ext;
	arrMovers : ARRAY[1..SystemParameters.NumberOfMovers] OF IMover;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{9cec9788-9ce4-4a9f-821c-172bdb3141aa}">
      <Declaration><![CDATA[METHOD Abort : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EnableTrigger := FALSE;
State := 0;
Abort := addMover.Abort();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{2913b891-dfae-43d9-b9d3-4a1a1101f452}">
      <Declaration><![CDATA[METHOD Cycle : HRESULT
VAR
	ResetAxesResult : BOOL;
	CAGroupResetResult : BOOL;
	AddMoverResult : BOOL;
	AddMoverCallResult : HRESULT;
	EnableMoverResult : BOOL;
	CAGroupEnableResult : BOOL;
	LogSentResult : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	0:
		IF EnableTrigger THEN
			Cycle := S_PENDING;
			State := 10;
			EnableTrigger := FALSE;
			moverNumbers := 1;
			_Busy := TRUE;
			_Done := FALSE;
			_Error := FALSE;
		END_IF
		
	10:
		FOR moverNumbers := 1 TO SystemParameters.NumberOfMovers DO
			ResetAxesResult := arrMovers[moverNumbers].ResetAxis();
		END_FOR
		moverNumbers := 1;
		State := 20;
		
	20:
		IF _collisionGroup.GroupState = CAGroupStatus.mcGroupStateErrorStop THEN
			CAGroupResetResult := _collisionGroup.Reset();
			LogSentResult := Logger.Send(TC_EVENTS.XtsCaGroupEvents.CAGroupReset,'');
		END_IF
		State := 30;
		
	30:
		arrMovers[moverNumbers].IdentInGroup := UINT_TO_INT( moverNumbers);
		AddMoverResult := addMover.AddMover(MoverToAdd := arrMovers[moverNumbers]);
		LogSentResult := Logger.Send(TC_EVENTS.XtsCaGroupEvents.AddingMoverToGroup,UINT_TO_STRING(moverNumbers));
		State := 40;
		
	40:
		IF addMover.Done THEN
			IF moverNumbers <> SystemParameters.NumberOfMovers THEN
				moverNumbers := moverNumbers + 1;
				State := 30;
			ELSE
				LogSentResult := Logger.Send(TC_EVENTS.XtsCaGroupEvents.AllMoversAdded,'');
				FOR moverNumbers := 1 TO SystemParameters.NumberOfMovers DO
					EnableMoverResult := arrMovers[moverNumbers].EnableAxis();
				END_FOR
				State := 50;
			END_IF
		END_IF
		
	50:
		AllMoversEnabled := TRUE;
		FOR moverNumbers := 1 TO SystemParameters.NumberOfMovers DO
			AllMoversEnabled := TRUE AND arrMovers[moverNumbers].isEnabled();
		END_FOR
		IF AllMoversEnabled THEN
			LogSentResult := Logger.Send(TC_EVENTS.XtsCaGroupEvents.AllMoversEnabled,'');
			CAGroupEnableResult := _collisionGroup.Enable();
			LogSentResult := Logger.Send(TC_EVENTS.XtsCaGroupEvents.CAGroupEnable,'');
			State := 60;
		END_IF
		
	60:
		IF _collisionGroup.GroupState = 2 THEN
			State := 0;
			_Busy := FALSE;
			_Done := TRUE;
			Cycle := S_OK;
		END_IF
	ELSE
		Cycle := E_FAIL;
END_CASE

AddMoverCallResult := addMover.Cycle();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{1c2a3468-bb52-4165-8d13-732b960a1dd0}">
      <Declaration><![CDATA[METHOD Enable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _Busy THEN
	EnableTrigger := Enable := true;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{a4125f89-7eca-48c2-8cb0-d4574c798d78}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	MyCaGroup : ICollisionGroup;
END_VAR
VAR
	AddMoverInitResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_collisionGroup := MyCaGroup;
AddMoverInitResult := addMover.FB_init(FALSE, FALSE, myCaGroup);]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverArray" Id="{2acddb92-7228-4ce1-abf4-c52047e8db87}">
      <Declaration><![CDATA[PROPERTY MoverArray : array[1..SystemParameters.NumberOfMovers] of IMover]]></Declaration>
      <Get Name="Get" Id="{45d4b80a-6470-4599-bc0b-107c251d2b9f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverArray := arrMovers;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2f5a4b68-8d6e-4eaa-8b71-147268b7ef4e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[arrMovers := MoverArray;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="XtsEnableSequence">
      <LineId Id="188" Count="0" />
    </LineIds>
    <LineIds Name="XtsEnableSequence.Abort">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="XtsEnableSequence.Cycle">
      <LineId Id="6" Count="2" />
      <LineId Id="74" Count="0" />
      <LineId Id="9" Count="58" />
      <LineId Id="75" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="69" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsEnableSequence.Enable">
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsEnableSequence.FB_init">
      <LineId Id="22" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="XtsEnableSequence.MoverArray.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsEnableSequence.MoverArray.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>