<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XtsMoverTestSuite" Id="{0851a5af-3a91-4347-bf84-40e9438cdb23}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsMoverTestSuite EXTENDS XtsMoverAxis
VAR
	fbTestSuites : FB_Testsuites;
	fbTestSuite : FB_Testsuite;
	xtsTrack : XtsTrackStub;
	iXtsTrackStub : I_XtsTrack := xtsTrack;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbTestSuite();

CASE fbTestSuite.P_Testcase OF
	E_Testcase.Start:
		THIS^._MyNCData.AxisId := 1;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.Cycle(), 'Cycle method did not return a complete');
		fbTestSuite.M_Testcase('GivenTheMoverIsFoundWhenCycleCalledThenCyclicTaskShouldRun',T#1S,'','',1);
		
	1:
		THIS^._MyNCData.AxisId := 0;
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.Cycle(), 'Cycle method ran without vaild NC connection');
		fbTestSuite.M_Testcase('GivenNoNCWhenCycleCalledThenCyclicShouldNotRun',T#1S,'','',2);	
		
	2:
		THIS^._CurrentTrack := 1; 
		_MyAxisStatus.Disabled := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.EnableMover(), 'Enable command failed when mover disabled');
		fbTestSuite.M_Testcase('GivenMoverDisabledWhenEnableCommandThenMoverEnables',T#1S,'','',3);
		
	3:
		_MyAxisStatus.Disabled := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.EnableMover(), 'Enable Command was accepted when enabled');
		fbTestSuite.M_Testcase('GivenMoverEnabledWhenEnableComandThenEnableRejected',T#1S,'','',4);
		
	4:
		_MyAxisStatus.Disabled := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.DisableMover(), 'Disable command failed when mover was enabled');
		fbTestSuite.M_Testcase('GivenMoverEnabledWhenDisabledCommandMadeThenMoverDisables',T#1S,'','',5);
		
	5:	
		_MyAxisStatus.Disabled := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.DisableMover(), 'Disable command accepted when mover was disabled');
		fbTestSuite.M_Testcase('GivenMoverDisabledWhenDisabledCommandMadeThenDisableRejected',T#1S,'','',6);
		
	6:
		_ActiveTrackLength := 5000.0;
		THIS^.Gap := 100.0;
		fbTestSuite.P_Assert.M_Equals_DINT(1,THIS^.MoveTo(RequiredPosition := 1000.0, MoveVelocity := 1000.0), 'Move command was rejected when mover was ready');
		fbTestSuite.M_Testcase('GivenMoverReadyWhenMoveCommandMadeThenMoverShouldAcceptMove',T#1S,'','',7);
		
	7:
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.MoveTo(RequiredPosition := 1000.0, MoveVelocity := 5000.0), 'Move command was accepted when velocity too high');
		fbTestSuite.M_Testcase('WhenMoveCommandVelocityTooHighThenMoverShouldRejectMove',T#1S,'','',8);
		
	8: 
		_ActiveTrackLength := 1500.0;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.MoveTo(RequiredPosition := 2000.0, MoveVelocity := 1000.0), 'Move command was accepted when position outside modulo');
		fbTestSuite.M_Testcase('WhenMoveCommandOutsideModuloThenMoverShouldRejectMove',T#1S,'','',9);
		
	9:
		THIS^._MyAxisStatus.NotMoving := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(1,THIS^.HaltAxis(),'Mover halt was rejected when mover moving');
		fbTestSuite.M_Testcase('GivenMovingMoverWhenHaltCommandThenMoverShouldAcceptHalt',T#1S,'','',10);
		
	10:
		THIS^._MyAxisStatus.NotMoving := FALSE;
		THIS^.HaltAxis();
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.HaltAxis(), 'Mover halt was accepted when halt already commanded');
		fbTestSuite.M_Testcase('GivenHaltingMoverWhenHaltCommandGivenThenMoverShouldRejectCommand',T#1S,'','',11);
	
	11:
		THIS^.MoverHaltCommand.Abort();
		THIS^._MyAxisStatus.NotMoving := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.HaltAxis(), 'Mover halt was accepted when velo was zero');
		fbTestSuite.M_Testcase('GivenStationaryMoverWhenHaltCommandedThenMoverShourlRejectCommand',T#1S,'','',12);
	
	12:
		THIS^.MoverResetCommand.Abort();
		THIS^._MyAxisStatus.Error := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(1,THIS^.ResetAxis(), 'Mover reset was rejected when mover in error');
		fbTestSuite.M_Testcase('GivenMoverErrorWhenResetCommandedThemMoverShouldAcceptReset',T#1S,'','',13);
		
	13:
		THIS^._MyAxisStatus.Error := TRUE;
		THIS^.ResetAxis();
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.ResetAxis(), 'Mover reset was accepted when reset already commanded');
		fbTestSuite.M_Testcase('GivenResettingMoverWhenResetCommandedThenMoverShouldRejectCommand',T#1S,'','',14);
		
	14:
		THIS^.MoverResetCommand.Abort();
		THIS^._MyAxisStatus.Error := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.ResetAxis(), 'Mover reset was accepted when no error');
		fbTestSuite.M_Testcase('GivenOKMoverWhenResetCommandedThenMoverShouldRejectCommand',T#1S,'','',15);
		
	15:
		_MyAxisStatus.NotMoving := TRUE;
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.ActivateTrack(newTrack := 16#1,Track := XtsTrackStub), 'Mover rejected valid active track command');
		fbTestSuite.M_Testcase('GivenAStationaryMoverWhenActiveTrackGivenThenMoverShouldAcceptNewTrack',T#1S,'','',16);
		
	16:
		_MyAxisStatus.NotMoving := FALSE;
		fbTestSuite.P_Assert.M_Equals_DINT(-1,THIS^.ActivateTrack(newTrack := 16#1,XtsTrackStub), 'Mover accepted track command when moving');
		fbTestSuite.M_Testcase('GivenMovingMoverWhenActiveTrackCommandThenMoverSouldRejectCommand',T#1S,'','',17);
		
	17:
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.ActivateTrack(newTrack := 16#1,XtsTrackStub), 'Mover Accepted invalid track');
		fbTestSuite.M_Testcase('GivenInvalidTrackWhenActiveTrackCommandThenMoverShouldReject',T#1S,'','',18);
		
	18:
		THIS^._CurrentTrack := 0; 
		fbTestSuite.P_Assert.M_Equals_DINT(-1, THIS^.EnableMover(), 'Mover accepted enable without a valid track');
		fbTestSuite.M_Testcase('GivenNoTracksRegisteredWhenEnebleGivenThenMoverShouldReject',T#1S,'','',19);
		
	19: //when mover is given a new track it sets that as track length
		fbTestSuite.P_Assert.M_Equals_DINT(1, THIS^.ActivateTrack(NewTrack := 1, Track := iXtsTrackStub), 'Mover did not set the track length when given new track');
		fbTestSuite.M_Testcase('GivenNewTrackWhenActivateTrackCalledThenMoverShouldAcceptNewTrackLength',T#1S,'','',E_Testcase.Done);
		
	E_Testcase.Done:;	 
END_CASE
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{89d1ac51-1a68-4b8a-9c62-33c597fb6608}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	XtsRunner : I_ObjectRunner;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//// Add Testsuite to Testsuites
TestSuiteGVL.fbTestsuites.M_Add(fbTestsuite);
TestSuiteGVL.fbTestsuites.P_Options.sFilePathName:= 'C:\test\report.xml';]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsMoverTestSuite">
      <LineId Id="19" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="147" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="148" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="32" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="52" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="54" Count="3" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="67" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="87" Count="5" />
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="103" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="105" Count="3" />
      <LineId Id="119" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="121" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="123" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="131" Count="5" />
      <LineId Id="153" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="158" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="160" Count="5" />
      <LineId Id="173" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="205" Count="1" />
      <LineId Id="214" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="XtsMoverTestSuite.FB_init">
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>