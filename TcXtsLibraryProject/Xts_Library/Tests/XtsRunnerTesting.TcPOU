<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XtsRunnerTesting" Id="{88ef7940-eca0-45ab-bf43-15147aee1c36}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsRunnerTesting EXTENDS XtsRunner
VAR
	bExecute:		BOOL;
	fbTestsuites:	FB_Testsuites;				// Testsuites
	XtsRunnerTestSuite : FB_Testsuite;
	
	// Test-vars	
	arrCyclicModules : ARRAY[1..11] OF FB_Mover;
	InitialiseModule : XtsHardware;
	InitAddedCheck : BOOL;
	CyclicAddedCheck: BOOL;
	loopCount1 : INT;
	loopCount2 : INT;
	loopCount3 : INT;
	loopCount4 : INT;
	loopCount5 : INT;
	loopCount6 : INT;
	loopCount7: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Run
fbTestsuites();

IF bExecute THEN
	// manual execute | override file path
	fbTestsuites.P_FilePathName:= 'C:\XtsRunnerTestReport.xml';
	bExecute:= NOT fbTestsuites.M_Request(E_Base.Execute);
END_IF

// Add Testsuite to Testsuites
fbTestsuites.M_Add(XtsRunnerTestSuite);			

{region "XtsRunnerTestSuite"}
XtsRunnerTestSuite();
CASE XtsRunnerTestSuite.P_Testcase OF
	E_Testcase.Start:
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',1);
			 
	1:
		XtsRunnerTestSuite.P_Assert.M_Equals_INT(0,THIS^.GetModuleCount(),'check modules empty');
		THIS^.ModuleCount := 1;
		XtsRunnerTestSuite.P_Assert.M_Equals_INT(1,THIS^.GetModuleCount(),'check module count seen correctly');
		THIS^.ModuleCount := 0;
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',2);
		loopCount1 := loopCount1 + 1;
		 
	2:
		XtsRunnerTestSuite.P_Assert.M_Equals_DINT(2,THIS^.AddComponent(arrCyclicModules[1]),'Try register 1 cyclic module');
		CyclicAddedCheck := THIS^.CyclicModules[0] <> 0;	 
		XtsRunnerTestSuite.P_Assert.M_IsTRUE(CyclicAddedCheck,'module not added in array correctly'); 
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',3);
		THIS^.CyclicModules[0] := 0;
		THIS^.ModuleCount := 0;	 
		CyclicAddedCheck := FALSE;
		loopCount2 := loopCount2 + 1;
			 
	3: 
		XtsRunnerTestSuite.P_Assert.M_Equals_DINT(2,THIS^.AddComponent(arrCyclicModules[1]),'Try register 1 cyclic module');
		InitAddedCheck := NOT (THIS^.InitialiseModules[0] <> 0);
		XtsRunnerTestSuite.P_Assert.M_IsTRUE(InitAddedCheck,'Initial interface added incorrectly');
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',4);
		THIS^.CyclicModules[0] := 0;
		THIS^.ModuleCount := 0;	 
		InitAddedCheck := FALSE;
		loopCount3 := loopCount3 + 1;	
	 
	4:
		XtsRunnerTestSuite.P_Assert.M_Equals_INT(0,THIS^.GetModuleCount(),'check modules empty');
		FOR i := 1 TO 10 DO 
			THIS^.AddComponent(arrCyclicModules[i]);
		END_FOR
		XtsRunnerTestSuite.P_Assert.M_Equals_DINT(1,THIS^.AddComponent(arrCyclicModules[11]),'add to many modules should be rejected');
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',5);
		FOR i := 1 TO 10 DO 
			THIS^.CyclicModules[i] := 0;
		END_FOR
		THIS^.ModuleCount := 0;		 
		loopCount4 := loopCount4 + 1; 
	
	5:
		THIS^.Clear();
		XtsRunnerTestSuite.P_Assert.M_Equals_DINT(2,THIS^.AddComponent(arrCyclicModules[1]),'try register a single cyclic modulea');
		XtsRunnerTestSuite.P_Assert.M_Equals_INT(1,THIS^.GetModuleCount(),'check module added in count'); 
		XtsRunnerTestSuite.P_Assert.M_Equals_DINT(2,THIS^.RemoveModule(arrCyclicModules[1]),'remove the same module from module list');
		XtsRunnerTestSuite.P_Assert.M_Equals_INT(0,THIS^.GetModuleCount(),'check modules empty');	 
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',6);
		loopCount5 := loopCount5 + 1;
	
	6:
		XtsRunnerTestSuite.P_Assert.M_Equals_INT(0,THIS^.GetModuleCount(),'check modules empty');
		XtsRunnerTestSuite.P_Assert.M_Equals_DINT(1,THIS^.RemoveModule(arrCyclicModules[1]),'Try remove from empty module list');	 
		XtsRunnerTestSuite.P_Assert.M_Equals_INT(0,THIS^.GetModuleCount(),'check modules empty big check');
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',7);
		loopCount6 := loopCount6 + 1;
		
	7:
		THIS^.AddComponent(InitialiseModule);
		CyclicAddedCheck := THIS^.CyclicModules[0] <> 0;	
		InitAddedCheck := THIS^.InitialiseModules[0] <> 0;
		XtsRunnerTestSuite.P_Assert.M_IsTRUE(CyclicAddedCheck,'module not added in array correctly');
		XtsRunnerTestSuite.P_Assert.M_IsTRUE(InitAddedCheck,'Initial interface not added correctly'); 
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',8);
		THIS^.CyclicModules[0] := 0;
		THIS^.InitialiseModules[0] := 0;
		THIS^.ModuleCount := 0;	 
		loopCount7 := loopCount7 + 1;
		
	8:
		THIS^.Clear();
		XtsRunnerTestSuite.M_Testcase('XtsRunner',T#1S,'','',E_Testcase.Done);
	E_Testcase.Done:;	 
END_CASE
{endregion}]]></ST>
    </Implementation>
    <LineIds Name="XtsRunnerTesting">
      <LineId Id="24" Count="15" />
      <LineId Id="41" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="148" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="126" Count="3" />
      <LineId Id="157" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="133" Count="2" />
      <LineId Id="158" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="52" Count="4" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="61" Count="3" />
      <LineId Id="66" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="68" Count="12" />
      <LineId Id="82" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="85" Count="6" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>