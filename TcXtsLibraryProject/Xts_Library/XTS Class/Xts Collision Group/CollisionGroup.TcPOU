<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CollisionGroup" Id="{8907fd76-d392-4030-a5c6-041188f5b990}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CollisionGroup extends CyclicBase IMPLEMENTS ICollisionGroup
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	stGroupInformation : CAGroupInfo;
	_caGroup : Tc3_McCoordinatedMotion.AXES_GROUP_REF;
	ReadGroupStatus : Tc3_McCoordinatedMotion.MC_GroupReadStatus;
	resetCAGroup : ResetGroup(THIS^);
	enableCAGroup : EnableGroup(THIS^);
	disableCAGroup : DisableGroup(THIS^);
	addMover : AddMoverToGroupTask(THIS^);
	removeAllAxes : RemoveAllMoverFromGroup(THIS^);
	grpStop : StopMoverGroup(THIS^);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Method Name="AddMoverToThisGroup" Id="{9f418b4e-0cf8-4b65-9d2d-7e6c1a46690c}">
      <Declaration><![CDATA[METHOD AddMoverToThisGroup : HRESULT
VAR_INPUT
	MoverToAdd : I_XtsMoverAxis;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT addMover.Busy THEN
	addMover.AddMover(MoverToAdd := MoverToAdd);
	AddMoverToThisGroup := 2;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{6b3cc58f-cb00-45fb-b855-5eb19dbaab5d}">
      <Declaration><![CDATA[METHOD Cycle : HRESULT
VAR
	ResetCaGroupResult : HRESULT;
	EnableCaGroupResult : HRESULT;
	DisableCaGroupResult : HRESULT;
	AddMoverCallResult: HRESULT;
	RemoveAllCycleResult: HRESULT;
	GrpStopCycleResult: HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ReadGroupStatus(
	AxesGroup:= _caGroup, 
	Enable:= TRUE );
ResetCaGroupResult := resetCAGroup.Cycle();
EnableCaGroupResult := enableCAGroup.Cycle();
DisableCaGroupResult := disableCAGroup.Cycle();
AddMoverCallResult := addMover.Cycle();
RemoveAllCycleResult := removeAllAxes.Cycle();
GrpStopCycleResult := grpStop.Cycle();


//Cyclic get CaGroup information
stGroupInformation.sName := 'MainCAGroup';
stGroupInformation.eGroupState := _caGroup.NcToPlc.Common.GroupStatus.State;
stGroupInformation.nAxesCount	:= UDINT_TO_INT(_caGroup.NcToPlc.Common.GroupAxesCount);
stGroupInformation.nId			:= _caGroup.NcToPlc.Common.GroupOID;	

IF ResetCaGroupResult = E_FAIL OR
	EnableCaGroupResult = E_FAIL OR
	DisableCaGroupResult = E_FAIL THEN
	Cycle := E_FAIL;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{236769ac-ee48-442c-86de-25258567af7c}">
      <Declaration><![CDATA[METHOD Disable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT disableCAGroup.Busy THEN
	disableCAGroup.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{9a19e9ba-2611-4357-a3d4-698f998ad87d}">
      <Declaration><![CDATA[METHOD Enable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT enableCAGroup.Busy THEN
	enableCAGroup.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAxisCount" Id="{45b9081d-ba05-41c5-b1b6-c67859faca98}">
      <Declaration><![CDATA[METHOD GetAxisCount : udint
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetAxisCount := _caGroup.NcToPlc.Common.GroupAxesCount;]]></ST>
      </Implementation>
    </Method>
    <Property Name="GroupRef" Id="{05d388ea-a899-4954-b35a-8298ecb26dd6}">
      <Declaration><![CDATA[PROPERTY GroupRef : reference to AXES_GROUP_REF]]></Declaration>
      <Get Name="Get" Id="{9960c5ab-7079-4a22-9f43-e4d1a1a5992b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[GroupRef REF= _caGroup;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="GroupState" Id="{a7850ad8-4f08-4a22-bf4c-efbfd8c96cf5}">
      <Declaration><![CDATA[PROPERTY GroupState : CAGroupStatus]]></Declaration>
      <Get Name="Get" Id="{51b877d1-f5c7-479f-9b28-cdb51e8876b7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF ReadGroupStatus.GroupDisabled THEN
	GroupState := CAGroupStatus.mcGroupStateDisabled;
ELSIF ReadGroupStatus.GroupErrorStop THEN
	GroupState := CAGroupStatus.mcGroupStateErrorStop;
ELSIF ReadGroupStatus.GroupHoming THEN
	GroupState := CAGroupStatus.mcGroupStateHoming;
ELSIF ReadGroupStatus.GroupMoving THEN
	GroupState := CAGroupStatus.mcGroupStateMoving;
ELSIF ReadGroupStatus.GroupNotReady THEN
	GroupState := CAGroupStatus.mcGroupStateNotReady;
ELSIF ReadGroupStatus.GroupStandby THEN
	GroupState := CAGroupStatus.mcGroupStateStandby;
ELSIF ReadGroupStatus.GroupStopping THEN
	GroupState := CAGroupStatus.mcGroupStateStopping;
ELSIF ReadGroupStatus.Error THEN
	GroupState := CAGroupStatus.mcGroupError;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GroupStop" Id="{96e619f0-ba68-4e46-ba5e-bd7a0dcefde6}">
      <Declaration><![CDATA[METHOD GroupStop : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT grpStop.Busy THEN
	GroupStop := 2;
	grpStop.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAllMovers" Id="{72daaa8f-92d0-4f12-b8f9-45742cf249d6}">
      <Declaration><![CDATA[METHOD RemoveAllMovers : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT removeAllAxes.Busy THEN
	removeAllAxes.RemoveAllMover();
	RemoveAllMovers := 2;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{109a65fd-df03-46ac-84a7-fd0107d964ee}">
      <Declaration><![CDATA[METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT resetCAGroup.Busy THEN
	resetCAGroup.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CollisionGroup">
      <LineId Id="52" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.AddMoverToThisGroup">
      <LineId Id="8" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.Cycle">
      <LineId Id="6" Count="5" />
      <LineId Id="35" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="12" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.Disable">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="CollisionGroup.Enable">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="CollisionGroup.GetAxisCount">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.GroupRef.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.GroupState.Get">
      <LineId Id="9" Count="15" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.GroupStop">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.RemoveAllMovers">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CollisionGroup.Reset">
      <LineId Id="4" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>