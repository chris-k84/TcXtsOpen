<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XTSHardware_V2" Id="{2082c175-1a19-4a3f-b920-8dbd46477756}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XTSHardware_V2 EXTENDS CyclicBase IMPLEMENTS I_Initialise
VAR
	XtsParts : ARRAY[1..SystemParameters.NumberOfParts] OF XtsPart;
	XtsTracks : ARRAY[1..SystemParameters.NumberOfTracks] OF XtsTrack;
	TrackOTCIDs: ARRAY [1..Tc3_XTS_Utility.TcIoXtsEnvironmentParameterList.MaxXtsTracksPerXpu] OF Tc3_XTS_Utility.OTCID;
	MyXPUInterface : Tc3_XTS_Utility.I_TcIoXtsProcessingUnit;
	MyXtsIoEnvVarRef : ITF_XTSIOEnvVarWrapper;
	XtsIoEnvInitialiseState : INT;
	i: INT;
	MyPartCount: UDINT;
	MyTrackCount: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{907368a2-7640-4dfa-a8a9-6f1d20861921}">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO UDINT_TO_INT(MyPartCount) DO
	XtsParts[i].Cycle();
END_FOR
FOR i := 1 TO UDINT_TO_INT(MyTrackCount) DO
	XtsTracks[i].Cycle();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{2a32c613-d5c7-4a65-bbe0-cb97daebdaa6}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	XtsRunner : I_ObjectRunner;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XtsRunner.AddComponent(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getAllMoversValid" Id="{61902ec7-4049-4544-9a8e-27dabf1b61be}">
      <Declaration><![CDATA[METHOD getAllMoversValid : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ IF XPU.GetAreAllPositionsValid() THEN
	 getAllMoversValid := TRUE;
	 Logger.Send(TC_EVENTS.XtsHardwareEvents.AllMoversValid,'');
 END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getMoversDetected" Id="{6134912a-11cc-419f-9366-ca4c2c2c2f9f}">
      <Declaration><![CDATA[METHOD getMoversDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XPU.GetDetectedMoverCount() = XPU.GetExpectedMoverCount() THEN
	getMoversDetected := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversDetected,UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetExpectedMoverCount()));
ELSE
	getMoversDetected := FALSE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversNotFound,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTrackByOTCID" Id="{d55b1037-e87a-4176-a531-719c46a289ea}">
      <Declaration><![CDATA[METHOD GetTrackByOTCID : I_XtsTrack
VAR_INPUT
	trackOTCID : OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO SystemParameters.NumberOfTracks DO
	IF trackOTCID = XtsTracks[i].MyOTCID THEN
		GetTrackByOTCID := XtsTracks[i];
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialise" Id="{95822be7-e433-46ff-bfc3-e4b3c51e2a74}">
      <Declaration><![CDATA[METHOD Initialise : HRESULT
VAR_INPUT
END_VAR

VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE XtsIoEnvInitialiseState OF
	0:
		IF MyXtsIoEnvVarRef <> 0 THEN
			IF MyXtsIoEnvVarRef.IsInitialised() THEN
				MyXPUInterface := MyXtsIoEnvVarRef.GetXPUInterface();
				XtsIoEnvInitialiseState := 1;
			END_IF
		END_IF
	1:
		MyPartCount := MyXPUInterface.GetPartCount();
		IF MyPartCount = SystemParameters.NumberOfParts THEN
			FOR i := 1 TO UDINT_TO_INT(MyPartCount) DO
				XtsParts[i].MyXtsIoEnvInterface := MyXPUInterface.PartTcIo(UDINT_TO_UINT(i));
			END_FOR
			XtsIoEnvInitialiseState := 3;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	3:
		MyTrackCount := MyXPUInterface.GetTrackCount();
		MyXPUInterface.GetTrackOids();
		TrackOTCIDs := MyXPUInterface.P_TrackOids;
		IF MyTrackCount = SystemParameters.NumberOfTracks THEN
			FOR i := 1 TO UDINT_TO_INT(MyTrackCount) DO
				XtsTracks[i].MyXtsIoEnvInterface := MyXPUInterface.TrackTcIo(UDINT_TO_UINT(i));
				XtsTracks[i].MyOTCID := TrackOTCIDs[i];
			END_FOR
			XtsIoEnvInitialiseState := 4;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	4:
		XtsIoEnvInitialiseState := 5;
		FOR i := 1 TO UDINT_TO_INT(MyPartCount) DO
			IF XtsParts[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 4;
			END_IF
		END_FOR
	5:
		XtsIoEnvInitialiseState := 6;
		FOR i := 1 TO UDINT_TO_INT(MyTrackCount) DO
			IF XtsTracks[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 5;
			END_IF
		END_FOR
	6:
		Initialise := 2;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Is24VdcOK" Id="{16c30a69-c544-4706-ba78-c8aed5346201}">
      <Declaration><![CDATA[METHOD Is24VdcOK : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Is24VdcOK := 2;
FOR i := 1 TO XPU.GetPartCount() DO
	IF XtsParts[i].Is24VOK() = 1 THEN
		Is24VdcOK := 1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Is48VdcOK" Id="{ff4a117c-24f4-4466-b159-c15d29dc7330}">
      <Declaration><![CDATA[METHOD Is48VdcOK : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Is48VdcOK := 2;
FOR i := 1 TO XPU.GetPartCount() DO
	IF XtsParts[i].Is48VOK() = 1 THEN
		Is48VdcOK := 1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInSim" Id="{c26b05e6-e2eb-40cc-bea5-adcd4dafa0e7}">
      <Declaration><![CDATA[METHOD IsInSim : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  XPU.GetOperationMode() = OperationMode.Simulation THEN
	IsInSim := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.XtsInSimulationMode,'');
ELSE
	IsInSim := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTracksForDetection" Id="{33a6fd5d-a8a8-4e54-be38-eeae850dd3e9}">
      <Declaration><![CDATA[METHOD SetTracksForDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO XPU.GetTrackCount() DO
	XPU.TrackTcIo(UDINT_TO_UINT(i)).SetIsIncludedInDetection(FALSE);
END_FOR

IF XPU.GetTrackCount() = 1 THEN
	XPU.TrackTcIo(1).SetIsIncludedInDetection(TRUE);
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XPU.GetTrackCount()));
	SetTracksForDetection := TRUE;
ELSE
	SetTracksForDetection := TRUE;
	CASE _TmsSwitch.Switch OF
		TmsSwitchPosition.Up: 
			XPU.TrackTcIo(3).SetIsIncludedInDetection(TRUE);
		TmsSwitchPosition.Middle:
			XPU.TrackTcIo(1).SetIsIncludedInDetection(TRUE);
			XPU.TrackTcIo(2).SetIsIncludedInDetection(TRUE);
		TmsSwitchPosition.Down:
			XPU.TrackTcIo(4).SetIsIncludedInDetection(TRUE);
		ELSE
			SetTracksForDetection := FALSE;
	END_CASE
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XPU.GetTrackCount()));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="TmsSwitch" Id="{0322d914-772f-4e3a-bafc-27238e97b814}">
      <Declaration><![CDATA[PROPERTY TmsSwitch : ITF_TmsSwitch]]></Declaration>
      <Get Name="Get" Id="{51272062-e362-42b5-8460-3b4abe74d2c0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TmsSwitch := _TmsSwitch;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b37394d7-4ee5-4cc5-b259-7cd76193ad38}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_TmsSwitch := TmsSwitch;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TriggerMoverDetection" Id="{15e78533-ebfe-46e6-bd25-18e4044d6883}">
      <Declaration><![CDATA[METHOD TriggerMoverDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XPU.TriggerRedetection();
Logger.Send(TC_EVENTS.XtsHardwareEvents.MoverDetectionInitiated,'');
TriggerMoverDetection := true;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverID" Id="{23436421-ecb3-466c-b86b-5fefe5c7904c}">
      <Declaration><![CDATA[METHOD TriggerMoverID : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mover1 Functionality		
// Check if "MoverIdDetectionMode" has been activated under the XtsProcessingUnit object.
IF XPU.GetMoverIdDetectionMode() = E_MoverIdDetectionMode.Mover1 THEN

	// Check if the "MoverIdDetection" has already been started or the Mover1 was found.
	IF NOT (bMoverIdDetectionActive OR bMoverIdDetected OR bTriggerDetect) THEN
		// Trigger the "MoverIdDetection".
		XPU.TriggerMoverIdDetection();
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionStarted,'');
		bTriggerDetect := true;
	END_IF

	// Check for error or success of "MoverIdDetection".
	bMoverIdDetectionError 	:= XPU.GetHasMoverIdDetectionError();
	bMoverIdDetected 	:= XPU.GetIsMoverIdDetectionValid();
	bMoverIdDetectionActive	:= XPU.GetIsMoverIdDetectionActive();
	
	// If the detection has an error, check for errors in output and try again.
	IF bMoverIdDetectionError THEN
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionFailed,'');
		RETURN; 
	END_IF

	// Do not process any further until the "MoverId" was deteced.
	IF NOT bMoverIdDetected THEN
		RETURN;
	END_IF	
	TriggerMoverID := TRUE;	
	Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionComplete,'');
ELSE
	TriggerMoverID := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.StandardMoverNumberingComplete,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="XtsIoEnvVarWrapper" Id="{9f0e6f27-b8f0-452c-b07d-d4d2a7ed1b3b}">
      <Declaration><![CDATA[PROPERTY XtsIoEnvVarWrapper : itf_xtsioenvvarwrapper]]></Declaration>
      <Get Name="Get" Id="{ef18a883-259a-46c5-ac1a-fd1d0138159b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[XtsIoEnvVarWrapper := MyXtsIoEnvVarRef;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3f18a9fd-c75b-45a9-b0a5-a4cb82b21b6b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyXtsIoEnvVarRef := XtsIoEnvVarWrapper;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="XTSHardware_V2">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.Cycle">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.getAllMoversValid">
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.getMoversDetected">
      <LineId Id="16" Count="5" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.GetTrackByOTCID">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.Initialise">
      <LineId Id="20" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="37" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="43" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="64" Count="4" />
      <LineId Id="63" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.Is24VdcOK">
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="9" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.Is48VdcOK">
      <LineId Id="6" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.IsInSim">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.SetTracksForDetection">
      <LineId Id="31" Count="8" />
      <LineId Id="56" Count="0" />
      <LineId Id="40" Count="7" />
      <LineId Id="54" Count="1" />
      <LineId Id="48" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.TmsSwitch.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.TmsSwitch.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.TriggerMoverDetection">
      <LineId Id="11" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.TriggerMoverID">
      <LineId Id="40" Count="2" />
      <LineId Id="44" Count="4" />
      <LineId Id="73" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="49" Count="21" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.XtsIoEnvVarWrapper.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XTSHardware_V2.XtsIoEnvVarWrapper.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>