<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="XtsHardware" Id="{01d7c7ee-eaba-4d97-9e2a-cab8b593df67}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsHardware EXTENDS CyclicBase IMPLEMENTS IXtsHardware, I_Initialise
VAR
	_TmsSwitch : ITF_TmsSwitch;
	bInit: BOOL;
	bMoverIdDetectionError		: BOOL;
	bMoverIdDetectionActive		: BOOL;
	bMoverIdDetected : BOOL;
	i: UDINT;
	bTriggerDetect: BOOL;
	XtsIoEnvironment : Tc3_XTS_Utility.FB_TcIoXtsEnvironment;
	XPU: Tc3_XTS_Utility.I_TcIoXtsProcessingUnit;
	XtsIoEnvInitialiseState : INT;
	XtsParts : ARRAY[1..SystemParameters.NumberOfParts] OF XtsPart;
	XtsTracks : ARRAY[1..SystemParameters.NumberOfTracks] OF XtsTrack;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{b464f15b-ca99-474e-bc8b-11279972c349}">
      <Declaration><![CDATA[METHOD Cycle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Cycle := S_OK;
FOR i := 1 TO XPU.GetPartCount() DO
	XtsParts[i].Cycle();
END_FOR
FOR i := 1 TO XPU.GetTrackCount() DO
	XtsTracks[i].Cycle();
END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{7d0880e3-23ff-433e-9f1f-2df9860acb17}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	XtsRunner : I_XtsRunner;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XtsRunner.AddComponent(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getAllMoversValid" Id="{c4e70289-55ca-41b9-a3bc-195801ae93a3}">
      <Declaration><![CDATA[METHOD getAllMoversValid : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ IF XPU.GetAreAllPositionsValid() THEN
	 getAllMoversValid := TRUE;
	 Logger.Send(TC_EVENTS.XtsHardwareEvents.AllMoversValid,'');
 END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverEnvInterface" Id="{1fc643c6-ecb9-4760-af6a-4f21ce7c87e0}">
      <Declaration><![CDATA[METHOD PUBLIC GetMoverEnvInterface : I_TcIoXtsXpuMover
VAR_INPUT
	MoverNumber : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMoverEnvInterface := XPU.MoverTcIo(MoverNumber);	]]></ST>
      </Implementation>
    </Method>
    <Method Name="getMoversDetected" Id="{5e49a15e-96a4-4ef0-90a8-d0eb7c5a7559}">
      <Declaration><![CDATA[METHOD getMoversDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF XPU.GetDetectedMoverCount() = XPU.GetExpectedMoverCount() THEN
	getMoversDetected := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversDetected,UDINT_TO_STRING(XtsIoEnvironment.XpuTcIo(1).GetExpectedMoverCount()));
ELSE
	getMoversDetected := FALSE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ExpectedMoversNotFound,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialise" Id="{238260bf-972c-4836-891f-55586c0f1b1a}">
      <Declaration><![CDATA[METHOD Initialise : HRESULT
VAR_INPUT
END_VAR

VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE XtsIoEnvInitialiseState OF
	0:
		IF XtsIoEnvironment.Init(TRUE) THEN
			XtsIoEnvironment.Init(FALSE);
			XtsIoEnvInitialiseState := 1;
		END_IF
	1:
		XPU := XtsIoEnvironment.XpuTcIo(1);
		XtsIoEnvInitialiseState := 2;
	2:
		IF XPU.GetPartCount() = SystemParameters.NumberOfParts THEN
			FOR i := 1 TO SystemParameters.NumberOfParts DO
				XtsParts[i].MyXtsIoEnvInterface := XPU.PartTcIo(UDINT_TO_UINT(i));
			END_FOR
			XtsIoEnvInitialiseState := 3;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	3:
		IF XPU.GetTrackCount() = SystemParameters.NumberOfTracks THEN
			FOR i := 1 TO SystemParameters.NumberOfTracks DO
				XtsTracks[i].MyXtsIoEnvInterface := XPU.TrackTcIo(UDINT_TO_UINT(i));
			END_FOR
			XtsIoEnvInitialiseState := 4;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	4:
		XtsIoEnvInitialiseState := 5;
		FOR i := 1 TO XPU.GetPartCount() DO
			IF XtsParts[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 4;
			END_IF
		END_FOR
	5:
		XtsIoEnvInitialiseState := 6;
		FOR i := 1 TO XPU.GetTrackCount() DO
			IF XtsTracks[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 5;
			END_IF
		END_FOR
	6:
		Initialise := 2;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Is24VdcOK" Id="{27d935e1-90ea-4fda-9458-1a71306cb612}">
      <Declaration><![CDATA[METHOD Is24VdcOK : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Is24VdcOK := 2;
FOR i := 1 TO XPU.GetPartCount() DO
	IF XtsParts[i].Is24VOK() = 1 THEN
		Is24VdcOK := 1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Is48VdcOK" Id="{0fe8ba5e-5482-4d68-bc25-9bb36a4434e6}">
      <Declaration><![CDATA[METHOD Is48VdcOK : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Is48VdcOK := 2;
FOR i := 1 TO XPU.GetPartCount() DO
	IF XtsParts[i].Is48VOK() = 1 THEN
		Is48VdcOK := 1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInSim" Id="{1d10bcec-acec-45d5-bf84-489041573d3d}">
      <Declaration><![CDATA[METHOD IsInSim : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  XPU.GetOperationMode() = OperationMode.Simulation THEN
	IsInSim := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.XtsInSimulationMode,'');
ELSE
	IsInSim := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTracksForDetection" Id="{ddc7d054-a36f-42ec-9521-b7a91e617287}">
      <Declaration><![CDATA[METHOD SetTracksForDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO XPU.GetTrackCount() DO
	XPU.TrackTcIo(UDINT_TO_UINT(i)).SetIsIncludedInDetection(FALSE);
END_FOR

IF XPU.GetTrackCount() = 1 THEN
	XPU.TrackTcIo(1).SetIsIncludedInDetection(TRUE);
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XPU.GetTrackCount()));
	SetTracksForDetection := TRUE;
ELSE
	SetTracksForDetection := TRUE;
	CASE _TmsSwitch.Switch OF
		TmsSwitchPosition.Up: 
			XPU.TrackTcIo(3).SetIsIncludedInDetection(TRUE);
		TmsSwitchPosition.Middle:
			XPU.TrackTcIo(1).SetIsIncludedInDetection(TRUE);
			XPU.TrackTcIo(2).SetIsIncludedInDetection(TRUE);
		TmsSwitchPosition.Down:
			XPU.TrackTcIo(4).SetIsIncludedInDetection(TRUE);
		ELSE
			SetTracksForDetection := FALSE;
	END_CASE
	Logger.Send(TC_EVENTS.XtsHardwareEvents.ActiveTracksAddedForDetection, UDINT_TO_STRING(XPU.GetTrackCount()));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="TmsSwitch" Id="{3e77501e-8518-4e1c-97a5-5dc9bc6d0fd4}">
      <Declaration><![CDATA[PROPERTY TmsSwitch : ITF_TmsSwitch]]></Declaration>
      <Get Name="Get" Id="{b0d03380-5fb6-4b27-9e19-7629ccd57ac3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TmsSwitch := _TmsSwitch;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ca7bb02b-1706-4344-953d-c58662955917}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_TmsSwitch := TmsSwitch;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TriggerMoverDetection" Id="{7ec0784a-bc20-43d5-9663-6bc83fb38f70}">
      <Declaration><![CDATA[METHOD TriggerMoverDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XPU.TriggerRedetection();
Logger.Send(TC_EVENTS.XtsHardwareEvents.MoverDetectionInitiated,'');
TriggerMoverDetection := true;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverID" Id="{3caa48f4-4134-416c-8ece-2720f801ed03}">
      <Declaration><![CDATA[METHOD TriggerMoverID : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mover1 Functionality		
// Check if "MoverIdDetectionMode" has been activated under the XtsProcessingUnit object.
IF XPU.GetMoverIdDetectionMode() = E_MoverIdDetectionMode.Mover1 THEN

	// Check if the "MoverIdDetection" has already been started or the Mover1 was found.
	IF NOT (bMoverIdDetectionActive OR bMoverIdDetected OR bTriggerDetect) THEN
		// Trigger the "MoverIdDetection".
		XPU.TriggerMoverIdDetection();
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionStarted,'');
		bTriggerDetect := true;
	END_IF

	// Check for error or success of "MoverIdDetection".
	bMoverIdDetectionError 	:= XPU.GetHasMoverIdDetectionError();
	bMoverIdDetected 	:= XPU.GetIsMoverIdDetectionValid();
	bMoverIdDetectionActive	:= XPU.GetIsMoverIdDetectionActive();
	
	// If the detection has an error, check for errors in output and try again.
	IF bMoverIdDetectionError THEN
		Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionFailed,'');
		RETURN; 
	END_IF

	// Do not process any further until the "MoverId" was deteced.
	IF NOT bMoverIdDetected THEN
		RETURN;
	END_IF	
	TriggerMoverID := TRUE;	
	Logger.Send(TC_EVENTS.XtsHardwareEvents.Mover1DetectionComplete,'');
ELSE
	TriggerMoverID := TRUE;
	Logger.Send(TC_EVENTS.XtsHardwareEvents.StandardMoverNumberingComplete,'');
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="XtsHardware">
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.Cycle">
      <LineId Id="13" Count="0" />
      <LineId Id="184" Count="5" />
      <LineId Id="71" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getAllMoversValid">
      <LineId Id="9" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.GetMoverEnvInterface">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.getMoversDetected">
      <LineId Id="16" Count="5" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.Initialise">
      <LineId Id="20" Count="1" />
      <LineId Id="24" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="32" Count="3" />
      <LineId Id="37" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="46" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="64" Count="4" />
      <LineId Id="63" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.Is24VdcOK">
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="9" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.Is48VdcOK">
      <LineId Id="6" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.IsInSim">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.SetTracksForDetection">
      <LineId Id="31" Count="8" />
      <LineId Id="56" Count="0" />
      <LineId Id="40" Count="7" />
      <LineId Id="54" Count="1" />
      <LineId Id="48" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TmsSwitch.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TmsSwitch.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverDetection">
      <LineId Id="11" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="XtsHardware.TriggerMoverID">
      <LineId Id="40" Count="2" />
      <LineId Id="44" Count="4" />
      <LineId Id="73" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="49" Count="21" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>