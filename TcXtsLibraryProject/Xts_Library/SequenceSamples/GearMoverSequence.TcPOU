<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="GearMoverSequence" Id="{bd14d467-a308-44a8-9456-1db44e91dfd6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC GearMoverSequence EXTENDS CyclicBase
VAR_INPUT
	ThisMover : IGearMover;
	StateMachine : IPmlStateMachine;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	FrontMoverState :(
        Init,                                               
        Available,
		MovingToStart, 
		AtStart,
		MoveToLoad,
		AtLoad,
		MoveToUnload,
		Unload);  
	RearMoverState :(
        Init,                                               
        Available,
		MovingToStart, 
		AtStart,
		MoveToHold,
		GearForClothoid,
		GearForStraight,
		GearToMaster,
		UnGear,
		ReverseAtUnload,
		ClearUnload); 
	bTest: BOOL;
	bProduct: BOOL;
	_HomePosition : MC_LREAL;
	_LoadPosition : MC_LREAL;
	_UnLoadPosition : MC_LREAL;
	_ProductLength : MC_LREAL;
END_VAR
VAR_IN_OUT
	MoverArray : ARRAY[*] OF IGearMover;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{9ff9bf1d-a14d-4a79-8f1a-ca0688980607}">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Cycle := S_OK;
IF ThisMover.isMaster() THEN
	CASE FrontMoverState OF
		Init:
			IF ThisMover.isDetected() THEN
				FrontMoverState := Available;
			END_IF
			
		Available:
			IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Starting THEN
				FrontMoverState := MovingToStart;
			END_IF
			
		MovingToStart:
			IF ThisMover.isAtPosition(position := _HomePosition) THEN
				FrontMoverState := AtStart;
			END_IF
				
		AtStart:
			//some start condition, timed to conveyor?
			IF bTest THEN
			IF ThisMover.MoveTo(Position := _LoadPosition,
								Velocity := 1000,
								BackwardMove := FALSE) THEN
				FrontMoverState :=  MoveToLoad;
				bTest := FALSE;
			END_IF
			END_IF
			
		MoveToLoad:
			IF ThisMover.isAtPosition(position := _LoadPosition) THEN
				FrontMoverState := AtLoad;
			END_IF
			
		AtLoad:
			//wait for rear mover to gear
			IF MoverArray[ThisMover.AxisRef.NcToPlc.AxisId - 1].inGear() AND bTest THEN
				IF ThisMover.MoveTo(Position := _UnLoadPosition,
								Velocity := 500,
								BackwardMove := FALSE) THEN
					FrontMoverState :=  MoveToUnload;
					bTest := FALSE;
				END_IF
			END_IF
			
		MoveToUnload:
			IF ThisMover.AxisRef.NcToPlc.ModuloActPos > 200 AND ThisMover.isStationary() THEN
				FrontMoverState := Unload;
			END_IF
			
		Unload:
			IF ThisMover.MoveTo(Position := _HomePosition,
								Velocity := 1000,
								BackwardMove := FALSE) THEN
				FrontMoverState :=  MovingToStart;
			END_IF
		ELSE
			Cycle := E_FAIL;	
	END_CASE
	
ELSE
	CASE RearMoverState OF
		Init:
			IF ThisMover.isDetected() THEN
				RearMoverState := Available;
			END_IF
			
		Available:
			IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Starting THEN
				RearMoverState := MovingToStart;
			END_IF
			
		MovingToStart:
			IF ThisMover.isAtPosition(position := _HomePosition) THEN
				RearMoverState := AtStart;
			END_IF
				
		AtStart:
			//wait for conveyor
			IF bProduct THEN
			 	ThisMover.Gear(MasterPosition := _LoadPosition, SlavePosition := _LoadPosition - _ProductLength);
				RearMoverState := MoveToHold;
			END_IF
			
		MoveToHold:
			IF ThisMover.inGear() THEN
				RearMoverState := GearForClothoid;
			END_IF
			
		GearForClothoid:
			IF ThisMover.AxisRef.NcToPlc.ModuloActPos > 3350 THEN
				ThisMover.Gear(MasterPosition := 3600.0, SlavePosition := 3540.0);
				RearMoverState := GearForStraight;
			END_IF
		
		GearForStraight:
			IF ThisMover.AxisRef.NcToPlc.ModuloActPos > 3950 THEN
				ThisMover.Gear(MasterPosition := 120.0, SlavePosition := 0.0);
				RearMoverState := GearToMaster;
			END_IF
			
		GearToMaster:
			IF MoverArray[ThisMover.masterAxis()].AxisRef.NcToPlc.ModuloActPos > 200 AND 
				MoverArray[ThisMover.masterAxis()].isStationary() THEN
				RearMoverState := UnGear;
			END_IF
			
		UnGear:
			ThisMover.MoveTo(Position := ThisMover.AxisRef.NcToPlc.ModuloActPos-2,
									Velocity := 1000.0,
									BackwardMove := TRUE);
				RearMoverState := ReverseAtUnload;
				
		ReverseAtUnload:
			ThisMover.MoveTo(Position := 200.0,
									Velocity := 1000.0,
									BackwardMove := TRUE);
				RearMoverState := ClearUnLoad;					
			
		ClearUnload:
			//wait for unload condition
			IF NOT bProduct THEN
				IF ThisMover.MoveTo(Position := _HomePosition,
									Velocity := 1000.0,
									BackwardMove := FALSE) THEN
					RearMoverState := MovingToStart;
				END_IF
			END_IF
		ELSE
			Cycle := E_FAIL;
	END_CASE	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="HomePosition" Id="{000fd702-08cc-45db-984d-5022cf7dd5d9}">
      <Declaration><![CDATA[PROPERTY HomePosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{8e79eec9-15fc-4d00-ade3-149b47a270d8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HomePosition := _HomePosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{340ffd5e-a348-4d13-9312-2b24ef93cb9e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_HomePosition := HomePosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="LoadPosition" Id="{b0acc0bc-f3c6-4caa-b109-6856ce77b3a4}">
      <Declaration><![CDATA[PROPERTY LoadPosition : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{44e14060-84f2-44a9-b931-6985a2c24b04}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LoadPosition := _LoadPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e5d533b3-b96b-43db-960b-ac337d67b6ed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_LoadPosition := LoadPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ProductLength" Id="{90cf3565-252a-4f5e-8511-e9495423c7f5}">
      <Declaration><![CDATA[PROPERTY ProductLength : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{8a3774d1-482b-4cfb-9f89-3413562b6298}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProductLength := _ProductLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{df48ab5c-e63c-446c-bbf7-9931b2497b89}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ProductLength := ProductLength;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="UnloadPosition" Id="{af4c9811-a311-40ba-9bd8-3c13568227af}">
      <Declaration><![CDATA[PROPERTY UnloadPosition : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{dc844d0b-3e53-49cd-87d0-93f5aeffba2c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[UnloadPosition := _UnLoadPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6ac3a959-9640-4bf3-854d-db7e571a2249}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_UnLoadPosition := UnloadPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="GearMoverSequence">
      <LineId Id="99" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.Cycle">
      <LineId Id="136" Count="0" />
      <LineId Id="6" Count="126" />
      <LineId Id="134" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.HomePosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.HomePosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.LoadPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.LoadPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.ProductLength.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.ProductLength.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.UnloadPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="GearMoverSequence.UnloadPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>