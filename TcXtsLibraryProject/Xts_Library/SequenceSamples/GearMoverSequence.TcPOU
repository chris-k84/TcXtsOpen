<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="GearMoverSequence" Id="{bd14d467-a308-44a8-9456-1db44e91dfd6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC GearMoverSequence
VAR_INPUT
	ThisMover : IGearMover;
	XtsTrack : IXtsTrack;
	StateMachine : IPmlStateMachine;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	FrontMoverState :(
        Init,                                               
        Available,
		MovingToStart, 
		AtStart,
		MoveToLoad,
		AtLoad,
		MoveToUnload,
		Unload);  
	RearMoverState :(
        Init,                                               
        Available,
		MovingToStart, 
		AtStart,
		MoveToHold,
		GearForClothoid,
		GearForStraight,
		GearToMaster,
		UnGear,
		ReverseAtUnload,
		ClearUnload); 
	bTest: BOOL;
	bProduct: BOOL;
	HomePosition : MC_LREAL := 1500.0;
	LoadPosition : MC_LREAL := 2250.0;
	UnLoadPosition : MC_LREAL := 500.0;
	ProductLength : MC_LREAL := 120.0;
END_VAR
VAR_IN_OUT
	MoverArray : ARRAY[*] OF IGearMover;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ThisMover.isMaster() THEN
	CASE FrontMoverState OF
		Init:
			IF ThisMover.isDetected() THEN
				FrontMoverState := Available;
			END_IF
			
		Available:
			IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Starting THEN
				FrontMoverState := MovingToStart;
			END_IF
			
		MovingToStart:
			IF ThisMover.isAtPosition(position := HomePosition) THEN
				FrontMoverState := AtStart;
			END_IF
				
		AtStart:
			//some start condition, timed to conveyor?
			IF bTest THEN
			IF ThisMover.MoveTo(Position := LoadPosition,
								Velocity := 1000,
								BackwardMove := FALSE) THEN
				FrontMoverState :=  MoveToLoad;
				bTest := FALSE;
			END_IF
			END_IF
			
		MoveToLoad:
			IF ThisMover.isAtPosition(position := LoadPosition) THEN
				FrontMoverState := AtLoad;
			END_IF
			
		AtLoad:
			//wait for rear mover to gear
			IF MoverArray[ThisMover.AxisRef.NcToPlc.AxisId - 1].inGear() AND bTest THEN
				IF ThisMover.MoveTo(Position := UnLoadPosition,
								Velocity := 500,
								BackwardMove := FALSE) THEN
					FrontMoverState :=  MoveToUnload;
					bTest := FALSE;
				END_IF
			END_IF
			
		MoveToUnload:
			IF ThisMover.AxisRef.NcToPlc.ModuloActPos > 200 AND ThisMover.isStationary() THEN
				FrontMoverState := Unload;
			END_IF
			
		Unload:
			IF ThisMover.MoveTo(Position := HomePosition,
								Velocity := 1000,
								BackwardMove := FALSE) THEN
				FrontMoverState :=  MovingToStart;
			END_IF	
	END_CASE
	
ELSE
	CASE RearMoverState OF
		Init:
			IF ThisMover.isDetected() THEN
				RearMoverState := Available;
			END_IF
			
		Available:
			IF StateMachine.GetCurrentState() = E_PMLState.ePMLState_Starting THEN
				RearMoverState := MovingToStart;
			END_IF
			
		MovingToStart:
			IF ThisMover.isAtPosition(position := HomePosition) THEN
				RearMoverState := AtStart;
			END_IF
				
		AtStart:
			//wait for conveyor
			IF bProduct THEN
			 	ThisMover.Gear(MasterPosition := LoadPosition, SlavePosition := LoadPosition - ProductLength);
				RearMoverState := MoveToHold;
			END_IF
			
		MoveToHold:
			IF ThisMover.inGear() THEN
				RearMoverState := GearForClothoid;
			END_IF
			
		GearForClothoid:
			IF ThisMover.AxisRef.NcToPlc.ModuloActPos > 3350 THEN
				ThisMover.Gear(MasterPosition := 3600.0, SlavePosition := 3540.0);
				RearMoverState := GearForStraight;
			END_IF
		
		GearForStraight:
			IF ThisMover.AxisRef.NcToPlc.ModuloActPos > 3950 THEN
				ThisMover.Gear(MasterPosition := 120.0, SlavePosition := 0.0);
				RearMoverState := GearToMaster;
			END_IF
			
		GearToMaster:
			IF MoverArray[ThisMover.masterAxis()].AxisRef.NcToPlc.ModuloActPos > 200 AND 
				MoverArray[ThisMover.masterAxis()].isStationary() THEN
				RearMoverState := UnGear;
			END_IF
			
		UnGear:
			ThisMover.MoveTo(Position := ThisMover.AxisRef.NcToPlc.ModuloActPos-2,
									Velocity := 1000.0,
									BackwardMove := TRUE);
				RearMoverState := ReverseAtUnload;
				
		ReverseAtUnload:
			ThisMover.MoveTo(Position := 200.0,
									Velocity := 1000.0,
									BackwardMove := TRUE);
				RearMoverState := ClearUnLoad;					
			
		ClearUnload:
			//wait for unload condition
			IF NOT bProduct THEN
				IF ThisMover.MoveTo(Position := HomePosition,
									Velocity := 1000.0,
									BackwardMove := FALSE) THEN
					RearMoverState := MovingToStart;
				END_IF
			END_IF
	END_CASE	
END_IF]]></ST>
    </Implementation>
    <LineIds Name="GearMoverSequence">
      <LineId Id="389" Count="125" />
      <LineId Id="99" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>